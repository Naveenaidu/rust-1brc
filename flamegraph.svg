<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="126508"><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (19 samples, 0.02%)</title><rect x="5.2376%" y="181" width="0.0150%" height="15" fill="rgb(227,0,7)" fg:x="6626" fg:w="19"/><text x="5.4876%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (19 samples, 0.02%)</title><rect x="5.2376%" y="165" width="0.0150%" height="15" fill="rgb(217,0,24)" fg:x="6626" fg:w="19"/><text x="5.4876%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (19 samples, 0.02%)</title><rect x="5.2376%" y="149" width="0.0150%" height="15" fill="rgb(221,193,54)" fg:x="6626" fg:w="19"/><text x="5.4876%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,163 samples, 1.71%)</title><rect x="5.2526%" y="181" width="1.7098%" height="15" fill="rgb(248,212,6)" fg:x="6645" fg:w="2163"/><text x="5.5026%" y="191.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2,163 samples, 1.71%)</title><rect x="5.2526%" y="165" width="1.7098%" height="15" fill="rgb(208,68,35)" fg:x="6645" fg:w="2163"/><text x="5.5026%" y="175.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,163 samples, 1.71%)</title><rect x="5.2526%" y="149" width="1.7098%" height="15" fill="rgb(232,128,0)" fg:x="6645" fg:w="2163"/><text x="5.5026%" y="159.50"></text></g><g><title>[libc.so.6] (1,773 samples, 1.40%)</title><rect x="5.5609%" y="133" width="1.4015%" height="15" fill="rgb(207,160,47)" fg:x="7035" fg:w="1773"/><text x="5.8109%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (262 samples, 0.21%)</title><rect x="6.9624%" y="181" width="0.2071%" height="15" fill="rgb(228,23,34)" fg:x="8808" fg:w="262"/><text x="7.2124%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (262 samples, 0.21%)</title><rect x="6.9624%" y="165" width="0.2071%" height="15" fill="rgb(218,30,26)" fg:x="8808" fg:w="262"/><text x="7.2124%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (305 samples, 0.24%)</title><rect x="13.5138%" y="149" width="0.2411%" height="15" fill="rgb(220,122,19)" fg:x="17096" fg:w="305"/><text x="13.7638%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (556 samples, 0.44%)</title><rect x="13.7549%" y="149" width="0.4395%" height="15" fill="rgb(250,228,42)" fg:x="17401" fg:w="556"/><text x="14.0049%" y="159.50"></text></g><g><title>core::ptr::align_offset (556 samples, 0.44%)</title><rect x="13.7549%" y="133" width="0.4395%" height="15" fill="rgb(240,193,28)" fg:x="17401" fg:w="556"/><text x="14.0049%" y="143.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (755 samples, 0.60%)</title><rect x="14.1944%" y="149" width="0.5968%" height="15" fill="rgb(216,20,37)" fg:x="17957" fg:w="755"/><text x="14.4444%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (249 samples, 0.20%)</title><rect x="14.5943%" y="133" width="0.1968%" height="15" fill="rgb(206,188,39)" fg:x="18463" fg:w="249"/><text x="14.8443%" y="143.50"></text></g><g><title>core::slice::memchr::memchr_aligned (213 samples, 0.17%)</title><rect x="14.7912%" y="149" width="0.1684%" height="15" fill="rgb(217,207,13)" fg:x="18712" fg:w="213"/><text x="15.0412%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (22,303 samples, 17.63%)</title><rect x="2.0331%" y="197" width="17.6297%" height="15" fill="rgb(231,73,38)" fg:x="2572" fg:w="22303"/><text x="2.2831%" y="207.50">&lt;core::str::pattern::CharSe..</text></g><g><title>core::slice::memchr::memchr (15,805 samples, 12.49%)</title><rect x="7.1695%" y="181" width="12.4933%" height="15" fill="rgb(225,20,46)" fg:x="9070" fg:w="15805"/><text x="7.4195%" y="191.50">core::slice::memchr..</text></g><g><title>core::slice::memchr::memchr_aligned (15,746 samples, 12.45%)</title><rect x="7.2161%" y="165" width="12.4466%" height="15" fill="rgb(210,31,41)" fg:x="9129" fg:w="15746"/><text x="7.4661%" y="175.50">core::slice::memchr..</text></g><g><title>core::slice::memchr::memchr_naive (5,950 samples, 4.70%)</title><rect x="14.9595%" y="149" width="4.7033%" height="15" fill="rgb(221,200,47)" fg:x="18925" fg:w="5950"/><text x="15.2095%" y="159.50">core:..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (24,847 samples, 19.64%)</title><rect x="0.0269%" y="229" width="19.6407%" height="15" fill="rgb(226,26,5)" fg:x="34" fg:w="24847"/><text x="0.2769%" y="239.50">&lt;core::str::iter::SplitInclusiv..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (24,847 samples, 19.64%)</title><rect x="0.0269%" y="213" width="19.6407%" height="15" fill="rgb(249,33,26)" fg:x="34" fg:w="24847"/><text x="0.2769%" y="223.50">core::str::iter::SplitInternal&lt;..</text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (570 samples, 0.45%)</title><rect x="19.6675%" y="181" width="0.4506%" height="15" fill="rgb(235,183,28)" fg:x="24881" fg:w="570"/><text x="19.9175%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (105 samples, 0.08%)</title><rect x="20.0351%" y="165" width="0.0830%" height="15" fill="rgb(221,5,38)" fg:x="25346" fg:w="105"/><text x="20.2851%" y="175.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (105 samples, 0.08%)</title><rect x="20.0351%" y="149" width="0.0830%" height="15" fill="rgb(247,18,42)" fg:x="25346" fg:w="105"/><text x="20.2851%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (105 samples, 0.08%)</title><rect x="20.0351%" y="133" width="0.0830%" height="15" fill="rgb(241,131,45)" fg:x="25346" fg:w="105"/><text x="20.2851%" y="143.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (105 samples, 0.08%)</title><rect x="20.0351%" y="117" width="0.0830%" height="15" fill="rgb(249,31,29)" fg:x="25346" fg:w="105"/><text x="20.2851%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (105 samples, 0.08%)</title><rect x="20.0351%" y="101" width="0.0830%" height="15" fill="rgb(225,111,53)" fg:x="25346" fg:w="105"/><text x="20.2851%" y="111.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (25,758 samples, 20.36%)</title><rect x="0.0269%" y="261" width="20.3608%" height="15" fill="rgb(238,160,17)" fg:x="34" fg:w="25758"/><text x="0.2769%" y="271.50">&lt;core::str::iter::Lines as core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,758 samples, 20.36%)</title><rect x="0.0269%" y="245" width="20.3608%" height="15" fill="rgb(214,148,48)" fg:x="34" fg:w="25758"/><text x="0.2769%" y="255.50">&lt;core::iter::adapters::map::Map&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (911 samples, 0.72%)</title><rect x="19.6675%" y="229" width="0.7201%" height="15" fill="rgb(232,36,49)" fg:x="24881" fg:w="911"/><text x="19.9175%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (911 samples, 0.72%)</title><rect x="19.6675%" y="213" width="0.7201%" height="15" fill="rgb(209,103,24)" fg:x="24881" fg:w="911"/><text x="19.9175%" y="223.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (911 samples, 0.72%)</title><rect x="19.6675%" y="197" width="0.7201%" height="15" fill="rgb(229,88,8)" fg:x="24881" fg:w="911"/><text x="19.9175%" y="207.50"></text></g><g><title>rust_1brc::main (341 samples, 0.27%)</title><rect x="20.1181%" y="181" width="0.2695%" height="15" fill="rgb(213,181,19)" fg:x="25451" fg:w="341"/><text x="20.3681%" y="191.50"></text></g><g><title>__rdl_alloc (263 samples, 0.21%)</title><rect x="22.0358%" y="37" width="0.2079%" height="15" fill="rgb(254,191,54)" fg:x="27877" fg:w="263"/><text x="22.2858%" y="47.50"></text></g><g><title>__rust_alloc (909 samples, 0.72%)</title><rect x="22.2437%" y="37" width="0.7185%" height="15" fill="rgb(241,83,37)" fg:x="28140" fg:w="909"/><text x="22.4937%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8,714 samples, 6.89%)</title><rect x="20.3876%" y="133" width="6.8881%" height="15" fill="rgb(233,36,39)" fg:x="25792" fg:w="8714"/><text x="20.6376%" y="143.50">alloc::ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8,714 samples, 6.89%)</title><rect x="20.3876%" y="117" width="6.8881%" height="15" fill="rgb(226,3,54)" fg:x="25792" fg:w="8714"/><text x="20.6376%" y="127.50">alloc::ra..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8,714 samples, 6.89%)</title><rect x="20.3876%" y="101" width="6.8881%" height="15" fill="rgb(245,192,40)" fg:x="25792" fg:w="8714"/><text x="20.6376%" y="111.50">alloc::ra..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8,642 samples, 6.83%)</title><rect x="20.4446%" y="85" width="6.8312%" height="15" fill="rgb(238,167,29)" fg:x="25864" fg:w="8642"/><text x="20.6946%" y="95.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::Global::alloc_impl (8,642 samples, 6.83%)</title><rect x="20.4446%" y="69" width="6.8312%" height="15" fill="rgb(232,182,51)" fg:x="25864" fg:w="8642"/><text x="20.6946%" y="79.50">alloc::al..</text></g><g><title>alloc::alloc::alloc (8,642 samples, 6.83%)</title><rect x="20.4446%" y="53" width="6.8312%" height="15" fill="rgb(231,60,39)" fg:x="25864" fg:w="8642"/><text x="20.6946%" y="63.50">alloc::al..</text></g><g><title>malloc (5,447 samples, 4.31%)</title><rect x="22.9701%" y="37" width="4.3057%" height="15" fill="rgb(208,69,12)" fg:x="29059" fg:w="5447"/><text x="23.2201%" y="47.50">malloc</text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (9,900 samples, 7.83%)</title><rect x="20.3876%" y="261" width="7.8256%" height="15" fill="rgb(235,93,37)" fg:x="25792" fg:w="9900"/><text x="20.6376%" y="271.50">&lt;str as all..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (9,900 samples, 7.83%)</title><rect x="20.3876%" y="245" width="7.8256%" height="15" fill="rgb(213,116,39)" fg:x="25792" fg:w="9900"/><text x="20.6376%" y="255.50">&lt;alloc::str..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (9,900 samples, 7.83%)</title><rect x="20.3876%" y="229" width="7.8256%" height="15" fill="rgb(222,207,29)" fg:x="25792" fg:w="9900"/><text x="20.6376%" y="239.50">alloc::str:..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (9,900 samples, 7.83%)</title><rect x="20.3876%" y="213" width="7.8256%" height="15" fill="rgb(206,96,30)" fg:x="25792" fg:w="9900"/><text x="20.6376%" y="223.50">alloc::slic..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9,900 samples, 7.83%)</title><rect x="20.3876%" y="197" width="7.8256%" height="15" fill="rgb(218,138,4)" fg:x="25792" fg:w="9900"/><text x="20.6376%" y="207.50">alloc::slic..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9,900 samples, 7.83%)</title><rect x="20.3876%" y="181" width="7.8256%" height="15" fill="rgb(250,191,14)" fg:x="25792" fg:w="9900"/><text x="20.6376%" y="191.50">alloc::slic..</text></g><g><title>alloc::slice::hack::to_vec (9,900 samples, 7.83%)</title><rect x="20.3876%" y="165" width="7.8256%" height="15" fill="rgb(239,60,40)" fg:x="25792" fg:w="9900"/><text x="20.6376%" y="175.50">alloc::slic..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9,900 samples, 7.83%)</title><rect x="20.3876%" y="149" width="7.8256%" height="15" fill="rgb(206,27,48)" fg:x="25792" fg:w="9900"/><text x="20.6376%" y="159.50">&lt;T as alloc..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,186 samples, 0.94%)</title><rect x="27.2757%" y="133" width="0.9375%" height="15" fill="rgb(225,35,8)" fg:x="34506" fg:w="1186"/><text x="27.5257%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,186 samples, 0.94%)</title><rect x="27.2757%" y="117" width="0.9375%" height="15" fill="rgb(250,213,24)" fg:x="34506" fg:w="1186"/><text x="27.5257%" y="127.50"></text></g><g><title>[libc.so.6] (1,185 samples, 0.94%)</title><rect x="27.2765%" y="101" width="0.9367%" height="15" fill="rgb(247,123,22)" fg:x="34507" fg:w="1185"/><text x="27.5265%" y="111.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (134 samples, 0.11%)</title><rect x="28.6962%" y="229" width="0.1059%" height="15" fill="rgb(231,138,38)" fg:x="36303" fg:w="134"/><text x="28.9462%" y="239.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (134 samples, 0.11%)</title><rect x="28.6962%" y="213" width="0.1059%" height="15" fill="rgb(231,145,46)" fg:x="36303" fg:w="134"/><text x="28.9462%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (134 samples, 0.11%)</title><rect x="28.6962%" y="197" width="0.1059%" height="15" fill="rgb(251,118,11)" fg:x="36303" fg:w="134"/><text x="28.9462%" y="207.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (134 samples, 0.11%)</title><rect x="28.6962%" y="181" width="0.1059%" height="15" fill="rgb(217,147,25)" fg:x="36303" fg:w="134"/><text x="28.9462%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (134 samples, 0.11%)</title><rect x="28.6962%" y="165" width="0.1059%" height="15" fill="rgb(247,81,37)" fg:x="36303" fg:w="134"/><text x="28.9462%" y="175.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (134 samples, 0.11%)</title><rect x="28.6962%" y="149" width="0.1059%" height="15" fill="rgb(209,12,38)" fg:x="36303" fg:w="134"/><text x="28.9462%" y="159.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (134 samples, 0.11%)</title><rect x="28.6962%" y="133" width="0.1059%" height="15" fill="rgb(227,1,9)" fg:x="36303" fg:w="134"/><text x="28.9462%" y="143.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (341 samples, 0.27%)</title><rect x="28.8021%" y="181" width="0.2695%" height="15" fill="rgb(248,47,43)" fg:x="36437" fg:w="341"/><text x="29.0521%" y="191.50"></text></g><g><title>core::str::_&lt;impl str&gt;::trim::_{{closure}} (341 samples, 0.27%)</title><rect x="28.8021%" y="165" width="0.2695%" height="15" fill="rgb(221,10,30)" fg:x="36437" fg:w="341"/><text x="29.0521%" y="175.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (341 samples, 0.27%)</title><rect x="28.8021%" y="149" width="0.2695%" height="15" fill="rgb(210,229,1)" fg:x="36437" fg:w="341"/><text x="29.0521%" y="159.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (939 samples, 0.74%)</title><rect x="28.8021%" y="197" width="0.7422%" height="15" fill="rgb(222,148,37)" fg:x="36437" fg:w="939"/><text x="29.0521%" y="207.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (598 samples, 0.47%)</title><rect x="29.0717%" y="181" width="0.4727%" height="15" fill="rgb(234,67,33)" fg:x="36778" fg:w="598"/><text x="29.3217%" y="191.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (598 samples, 0.47%)</title><rect x="29.0717%" y="165" width="0.4727%" height="15" fill="rgb(247,98,35)" fg:x="36778" fg:w="598"/><text x="29.3217%" y="175.50"></text></g><g><title>core::str::validations::next_code_point_reverse (598 samples, 0.47%)</title><rect x="29.0717%" y="149" width="0.4727%" height="15" fill="rgb(247,138,52)" fg:x="36778" fg:w="598"/><text x="29.3217%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (1,103 samples, 0.87%)</title><rect x="28.8021%" y="229" width="0.8719%" height="15" fill="rgb(213,79,30)" fg:x="36437" fg:w="1103"/><text x="29.0521%" y="239.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (1,103 samples, 0.87%)</title><rect x="28.8021%" y="213" width="0.8719%" height="15" fill="rgb(246,177,23)" fg:x="36437" fg:w="1103"/><text x="29.0521%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (164 samples, 0.13%)</title><rect x="29.5444%" y="197" width="0.1296%" height="15" fill="rgb(230,62,27)" fg:x="37376" fg:w="164"/><text x="29.7944%" y="207.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (241 samples, 0.19%)</title><rect x="29.6788%" y="181" width="0.1905%" height="15" fill="rgb(216,154,8)" fg:x="37546" fg:w="241"/><text x="29.9288%" y="191.50"></text></g><g><title>core::str::_&lt;impl str&gt;::trim::_{{closure}} (241 samples, 0.19%)</title><rect x="29.6788%" y="165" width="0.1905%" height="15" fill="rgb(244,35,45)" fg:x="37546" fg:w="241"/><text x="29.9288%" y="175.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (241 samples, 0.19%)</title><rect x="29.6788%" y="149" width="0.1905%" height="15" fill="rgb(251,115,12)" fg:x="37546" fg:w="241"/><text x="29.9288%" y="159.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (122 samples, 0.10%)</title><rect x="29.8693%" y="181" width="0.0964%" height="15" fill="rgb(240,54,50)" fg:x="37787" fg:w="122"/><text x="30.1193%" y="191.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="29.9380%" y="165" width="0.0277%" height="15" fill="rgb(233,84,52)" fg:x="37874" fg:w="35"/><text x="30.1880%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (30 samples, 0.02%)</title><rect x="29.9420%" y="149" width="0.0237%" height="15" fill="rgb(207,117,47)" fg:x="37879" fg:w="30"/><text x="30.1920%" y="159.50"></text></g><g><title>core::str::validations::utf8_first_byte (14 samples, 0.01%)</title><rect x="29.9546%" y="133" width="0.0111%" height="15" fill="rgb(249,43,39)" fg:x="37895" fg:w="14"/><text x="30.2046%" y="143.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (370 samples, 0.29%)</title><rect x="29.6740%" y="197" width="0.2925%" height="15" fill="rgb(209,38,44)" fg:x="37540" fg:w="370"/><text x="29.9240%" y="207.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (475 samples, 0.38%)</title><rect x="29.6740%" y="229" width="0.3755%" height="15" fill="rgb(236,212,23)" fg:x="37540" fg:w="475"/><text x="29.9240%" y="239.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (475 samples, 0.38%)</title><rect x="29.6740%" y="213" width="0.3755%" height="15" fill="rgb(242,79,21)" fg:x="37540" fg:w="475"/><text x="29.9240%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (105 samples, 0.08%)</title><rect x="29.9665%" y="197" width="0.0830%" height="15" fill="rgb(211,96,35)" fg:x="37910" fg:w="105"/><text x="30.2165%" y="207.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (2,473 samples, 1.95%)</title><rect x="28.2132%" y="261" width="1.9548%" height="15" fill="rgb(253,215,40)" fg:x="35692" fg:w="2473"/><text x="28.4632%" y="271.50">c..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2,328 samples, 1.84%)</title><rect x="28.3279%" y="245" width="1.8402%" height="15" fill="rgb(211,81,21)" fg:x="35837" fg:w="2328"/><text x="28.5779%" y="255.50">c..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (150 samples, 0.12%)</title><rect x="30.0495%" y="229" width="0.1186%" height="15" fill="rgb(208,190,38)" fg:x="38015" fg:w="150"/><text x="30.2995%" y="239.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (150 samples, 0.12%)</title><rect x="30.0495%" y="213" width="0.1186%" height="15" fill="rgb(235,213,38)" fg:x="38015" fg:w="150"/><text x="30.2995%" y="223.50"></text></g><g><title>rust_1brc::main (78 samples, 0.06%)</title><rect x="30.1681%" y="261" width="0.0617%" height="15" fill="rgb(237,122,38)" fg:x="38165" fg:w="78"/><text x="30.4181%" y="271.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (141 samples, 0.11%)</title><rect x="37.3075%" y="197" width="0.1115%" height="15" fill="rgb(244,218,35)" fg:x="47197" fg:w="141"/><text x="37.5575%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (141 samples, 0.11%)</title><rect x="37.3075%" y="181" width="0.1115%" height="15" fill="rgb(240,68,47)" fg:x="47197" fg:w="141"/><text x="37.5575%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (141 samples, 0.11%)</title><rect x="37.3075%" y="165" width="0.1115%" height="15" fill="rgb(210,16,53)" fg:x="47197" fg:w="141"/><text x="37.5575%" y="175.50"></text></g><g><title>[libc.so.6] (1,304 samples, 1.03%)</title><rect x="37.8585%" y="149" width="1.0308%" height="15" fill="rgb(235,124,12)" fg:x="47894" fg:w="1304"/><text x="38.1085%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,861 samples, 1.47%)</title><rect x="37.4190%" y="197" width="1.4711%" height="15" fill="rgb(224,169,11)" fg:x="47338" fg:w="1861"/><text x="37.6690%" y="207.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,861 samples, 1.47%)</title><rect x="37.4190%" y="181" width="1.4711%" height="15" fill="rgb(250,166,2)" fg:x="47338" fg:w="1861"/><text x="37.6690%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,861 samples, 1.47%)</title><rect x="37.4190%" y="165" width="1.4711%" height="15" fill="rgb(242,216,29)" fg:x="47338" fg:w="1861"/><text x="37.6690%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,290 samples, 1.02%)</title><rect x="38.8900%" y="197" width="1.0197%" height="15" fill="rgb(230,116,27)" fg:x="49199" fg:w="1290"/><text x="39.1400%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,290 samples, 1.02%)</title><rect x="38.8900%" y="181" width="1.0197%" height="15" fill="rgb(228,99,48)" fg:x="49199" fg:w="1290"/><text x="39.1400%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (37 samples, 0.03%)</title><rect x="40.7049%" y="165" width="0.0292%" height="15" fill="rgb(253,11,6)" fg:x="51495" fg:w="37"/><text x="40.9549%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (79 samples, 0.06%)</title><rect x="40.7342%" y="165" width="0.0624%" height="15" fill="rgb(247,143,39)" fg:x="51532" fg:w="79"/><text x="40.9842%" y="175.50"></text></g><g><title>core::ptr::align_offset (79 samples, 0.06%)</title><rect x="40.7342%" y="149" width="0.0624%" height="15" fill="rgb(236,97,10)" fg:x="51532" fg:w="79"/><text x="40.9842%" y="159.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (122 samples, 0.10%)</title><rect x="40.7966%" y="165" width="0.0964%" height="15" fill="rgb(233,208,19)" fg:x="51611" fg:w="122"/><text x="41.0466%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (36 samples, 0.03%)</title><rect x="40.8646%" y="149" width="0.0285%" height="15" fill="rgb(216,164,2)" fg:x="51697" fg:w="36"/><text x="41.1146%" y="159.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,601 samples, 1.27%)</title><rect x="40.2188%" y="181" width="1.2655%" height="15" fill="rgb(220,129,5)" fg:x="50880" fg:w="1601"/><text x="40.4688%" y="191.50"></text></g><g><title>core::slice::memchr::memchr_naive (748 samples, 0.59%)</title><rect x="40.8931%" y="165" width="0.5913%" height="15" fill="rgb(242,17,10)" fg:x="51733" fg:w="748"/><text x="41.1431%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (16,647 samples, 13.16%)</title><rect x="31.9466%" y="213" width="13.1589%" height="15" fill="rgb(242,107,0)" fg:x="40415" fg:w="16647"/><text x="32.1966%" y="223.50">&lt;core::str::pattern:..</text></g><g><title>core::slice::memchr::memchr (6,573 samples, 5.20%)</title><rect x="39.9097%" y="197" width="5.1957%" height="15" fill="rgb(251,28,31)" fg:x="50489" fg:w="6573"/><text x="40.1597%" y="207.50">core::..</text></g><g><title>core::slice::memchr::memchr_naive (4,581 samples, 3.62%)</title><rect x="41.4843%" y="181" width="3.6211%" height="15" fill="rgb(233,223,10)" fg:x="52481" fg:w="4581"/><text x="41.7343%" y="191.50">core..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (295 samples, 0.23%)</title><rect x="45.1054%" y="213" width="0.2332%" height="15" fill="rgb(215,21,27)" fg:x="57062" fg:w="295"/><text x="45.3554%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (15 samples, 0.01%)</title><rect x="45.3268%" y="197" width="0.0119%" height="15" fill="rgb(232,23,21)" fg:x="57342" fg:w="15"/><text x="45.5768%" y="207.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (15 samples, 0.01%)</title><rect x="45.3268%" y="181" width="0.0119%" height="15" fill="rgb(244,5,23)" fg:x="57342" fg:w="15"/><text x="45.5768%" y="191.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (19,662 samples, 15.54%)</title><rect x="30.2297%" y="245" width="15.5421%" height="15" fill="rgb(226,81,46)" fg:x="38243" fg:w="19662"/><text x="30.4797%" y="255.50">&lt;core::str::iter::Split&lt;..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (19,662 samples, 15.54%)</title><rect x="30.2297%" y="229" width="15.5421%" height="15" fill="rgb(247,70,30)" fg:x="38243" fg:w="19662"/><text x="30.4797%" y="239.50">core::str::iter::SplitIn..</text></g><g><title>rust_1brc::main (548 samples, 0.43%)</title><rect x="45.3386%" y="213" width="0.4332%" height="15" fill="rgb(212,68,19)" fg:x="57357" fg:w="548"/><text x="45.5886%" y="223.50"></text></g><g><title>__rdl_alloc (279 samples, 0.22%)</title><rect x="46.5591%" y="53" width="0.2205%" height="15" fill="rgb(240,187,13)" fg:x="58901" fg:w="279"/><text x="46.8091%" y="63.50"></text></g><g><title>__rust_alloc (268 samples, 0.21%)</title><rect x="46.7797%" y="53" width="0.2118%" height="15" fill="rgb(223,113,26)" fg:x="59180" fg:w="268"/><text x="47.0297%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,971 samples, 2.35%)</title><rect x="45.7718%" y="149" width="2.3485%" height="15" fill="rgb(206,192,2)" fg:x="57905" fg:w="2971"/><text x="46.0218%" y="159.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,971 samples, 2.35%)</title><rect x="45.7718%" y="133" width="2.3485%" height="15" fill="rgb(241,108,4)" fg:x="57905" fg:w="2971"/><text x="46.0218%" y="143.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,971 samples, 2.35%)</title><rect x="45.7718%" y="117" width="2.3485%" height="15" fill="rgb(247,173,49)" fg:x="57905" fg:w="2971"/><text x="46.0218%" y="127.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,960 samples, 2.34%)</title><rect x="45.7805%" y="101" width="2.3398%" height="15" fill="rgb(224,114,35)" fg:x="57916" fg:w="2960"/><text x="46.0305%" y="111.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,960 samples, 2.34%)</title><rect x="45.7805%" y="85" width="2.3398%" height="15" fill="rgb(245,159,27)" fg:x="57916" fg:w="2960"/><text x="46.0305%" y="95.50">a..</text></g><g><title>alloc::alloc::alloc (2,960 samples, 2.34%)</title><rect x="45.7805%" y="69" width="2.3398%" height="15" fill="rgb(245,172,44)" fg:x="57916" fg:w="2960"/><text x="46.0305%" y="79.50">a..</text></g><g><title>malloc (1,427 samples, 1.13%)</title><rect x="46.9923%" y="53" width="1.1280%" height="15" fill="rgb(236,23,11)" fg:x="59449" fg:w="1427"/><text x="47.2423%" y="63.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4,118 samples, 3.26%)</title><rect x="45.7718%" y="165" width="3.2551%" height="15" fill="rgb(205,117,38)" fg:x="57905" fg:w="4118"/><text x="46.0218%" y="175.50">&lt;T ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,147 samples, 0.91%)</title><rect x="48.1203%" y="149" width="0.9067%" height="15" fill="rgb(237,72,25)" fg:x="60876" fg:w="1147"/><text x="48.3703%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,147 samples, 0.91%)</title><rect x="48.1203%" y="133" width="0.9067%" height="15" fill="rgb(244,70,9)" fg:x="60876" fg:w="1147"/><text x="48.3703%" y="143.50"></text></g><g><title>[libc.so.6] (897 samples, 0.71%)</title><rect x="48.3179%" y="117" width="0.7090%" height="15" fill="rgb(217,125,39)" fg:x="61126" fg:w="897"/><text x="48.5679%" y="127.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4,149 samples, 3.28%)</title><rect x="45.7718%" y="245" width="3.2796%" height="15" fill="rgb(235,36,10)" fg:x="57905" fg:w="4149"/><text x="46.0218%" y="255.50">all..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4,149 samples, 3.28%)</title><rect x="45.7718%" y="229" width="3.2796%" height="15" fill="rgb(251,123,47)" fg:x="57905" fg:w="4149"/><text x="46.0218%" y="239.50">all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4,149 samples, 3.28%)</title><rect x="45.7718%" y="213" width="3.2796%" height="15" fill="rgb(221,13,13)" fg:x="57905" fg:w="4149"/><text x="46.0218%" y="223.50">all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4,149 samples, 3.28%)</title><rect x="45.7718%" y="197" width="3.2796%" height="15" fill="rgb(238,131,9)" fg:x="57905" fg:w="4149"/><text x="46.0218%" y="207.50">all..</text></g><g><title>alloc::slice::hack::to_vec (4,149 samples, 3.28%)</title><rect x="45.7718%" y="181" width="3.2796%" height="15" fill="rgb(211,50,8)" fg:x="57905" fg:w="4149"/><text x="46.0218%" y="191.50">all..</text></g><g><title>rust_1brc::main (31 samples, 0.02%)</title><rect x="49.0269%" y="165" width="0.0245%" height="15" fill="rgb(245,182,24)" fg:x="62023" fg:w="31"/><text x="49.2769%" y="175.50"></text></g><g><title>__rdl_dealloc (270 samples, 0.21%)</title><rect x="49.0514%" y="149" width="0.2134%" height="15" fill="rgb(242,14,37)" fg:x="62054" fg:w="270"/><text x="49.3014%" y="159.50"></text></g><g><title>__rust_dealloc (536 samples, 0.42%)</title><rect x="49.2649%" y="149" width="0.4237%" height="15" fill="rgb(246,228,12)" fg:x="62324" fg:w="536"/><text x="49.5149%" y="159.50"></text></g><g><title>[libc.so.6] (4,262 samples, 3.37%)</title><rect x="50.7177%" y="133" width="3.3690%" height="15" fill="rgb(213,55,15)" fg:x="64162" fg:w="4262"/><text x="50.9677%" y="143.50">[li..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,372 samples, 5.04%)</title><rect x="49.0514%" y="181" width="5.0368%" height="15" fill="rgb(209,9,3)" fg:x="62054" fg:w="6372"/><text x="49.3014%" y="191.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (6,372 samples, 5.04%)</title><rect x="49.0514%" y="165" width="5.0368%" height="15" fill="rgb(230,59,30)" fg:x="62054" fg:w="6372"/><text x="49.3014%" y="175.50">alloc:..</text></g><g><title>cfree (5,566 samples, 4.40%)</title><rect x="49.6886%" y="149" width="4.3997%" height="15" fill="rgb(209,121,21)" fg:x="62860" fg:w="5566"/><text x="49.9386%" y="159.50">cfree</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6,374 samples, 5.04%)</title><rect x="49.0514%" y="245" width="5.0384%" height="15" fill="rgb(220,109,13)" fg:x="62054" fg:w="6374"/><text x="49.3014%" y="255.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6,374 samples, 5.04%)</title><rect x="49.0514%" y="229" width="5.0384%" height="15" fill="rgb(232,18,1)" fg:x="62054" fg:w="6374"/><text x="49.3014%" y="239.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6,374 samples, 5.04%)</title><rect x="49.0514%" y="213" width="5.0384%" height="15" fill="rgb(215,41,42)" fg:x="62054" fg:w="6374"/><text x="49.3014%" y="223.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,374 samples, 5.04%)</title><rect x="49.0514%" y="197" width="5.0384%" height="15" fill="rgb(224,123,36)" fg:x="62054" fg:w="6374"/><text x="49.3014%" y="207.50">&lt;alloc..</text></g><g><title>core::result::Result&lt;T,E&gt;::expect (275 samples, 0.22%)</title><rect x="54.0899%" y="245" width="0.2174%" height="15" fill="rgb(240,125,3)" fg:x="68428" fg:w="275"/><text x="54.3399%" y="255.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (274 samples, 0.22%)</title><rect x="54.8329%" y="213" width="0.2166%" height="15" fill="rgb(205,98,50)" fg:x="69368" fg:w="274"/><text x="55.0829%" y="223.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::pow10_fast_path (44 samples, 0.03%)</title><rect x="56.6818%" y="181" width="0.0348%" height="15" fill="rgb(205,185,37)" fg:x="71707" fg:w="44"/><text x="56.9318%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (3,896 samples, 3.08%)</title><rect x="56.7166%" y="181" width="3.0796%" height="15" fill="rgb(238,207,15)" fg:x="71751" fg:w="3896"/><text x="56.9666%" y="191.50">&lt;f3..</text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (4,425 samples, 3.50%)</title><rect x="56.4557%" y="197" width="3.4978%" height="15" fill="rgb(213,199,42)" fg:x="71421" fg:w="4425"/><text x="56.7057%" y="207.50">cor..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (199 samples, 0.16%)</title><rect x="59.7962%" y="181" width="0.1573%" height="15" fill="rgb(235,201,11)" fg:x="75647" fg:w="199"/><text x="60.0462%" y="191.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (89 samples, 0.07%)</title><rect x="62.4806%" y="181" width="0.0704%" height="15" fill="rgb(207,46,11)" fg:x="79043" fg:w="89"/><text x="62.7306%" y="191.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (25 samples, 0.02%)</title><rect x="65.7034%" y="133" width="0.0198%" height="15" fill="rgb(241,35,35)" fg:x="83120" fg:w="25"/><text x="65.9534%" y="143.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (2,097 samples, 1.66%)</title><rect x="64.2212%" y="149" width="1.6576%" height="15" fill="rgb(243,32,47)" fg:x="81245" fg:w="2097"/><text x="64.4712%" y="159.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (197 samples, 0.16%)</title><rect x="65.7231%" y="133" width="0.1557%" height="15" fill="rgb(247,202,23)" fg:x="83145" fg:w="197"/><text x="65.9731%" y="143.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (3,597 samples, 2.84%)</title><rect x="63.2324%" y="165" width="2.8433%" height="15" fill="rgb(219,102,11)" fg:x="79994" fg:w="3597"/><text x="63.4824%" y="175.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_number (249 samples, 0.20%)</title><rect x="65.8788%" y="149" width="0.1968%" height="15" fill="rgb(243,110,44)" fg:x="83342" fg:w="249"/><text x="66.1288%" y="159.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (7,746 samples, 6.12%)</title><rect x="59.9535%" y="197" width="6.1229%" height="15" fill="rgb(222,74,54)" fg:x="75846" fg:w="7746"/><text x="60.2035%" y="207.50">core::nu..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (4,460 samples, 3.53%)</title><rect x="62.5510%" y="181" width="3.5255%" height="15" fill="rgb(216,99,12)" fg:x="79132" fg:w="4460"/><text x="62.8010%" y="191.50">cor..</text></g><g><title>core::str::&lt;impl str&gt;::parse (15,153 samples, 11.98%)</title><rect x="54.3072%" y="245" width="11.9779%" height="15" fill="rgb(226,22,26)" fg:x="68703" fg:w="15153"/><text x="54.5572%" y="255.50">core::str::&lt;impl s..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (15,050 samples, 11.90%)</title><rect x="54.3887%" y="229" width="11.8965%" height="15" fill="rgb(217,163,10)" fg:x="68806" fg:w="15050"/><text x="54.6387%" y="239.50">core::num::dec2flt..</text></g><g><title>core::num::dec2flt::dec2flt (14,214 samples, 11.24%)</title><rect x="55.0495%" y="213" width="11.2357%" height="15" fill="rgb(213,25,53)" fg:x="69642" fg:w="14214"/><text x="55.2995%" y="223.50">core::num::dec2fl..</text></g><g><title>core::slice::&lt;impl [T]&gt;::first (264 samples, 0.21%)</title><rect x="66.0765%" y="197" width="0.2087%" height="15" fill="rgb(252,105,26)" fg:x="83592" fg:w="264"/><text x="66.3265%" y="207.50"></text></g><g><title>rust_1brc::read_line (46,204 samples, 36.52%)</title><rect x="30.2297%" y="261" width="36.5226%" height="15" fill="rgb(220,39,43)" fg:x="38243" fg:w="46204"/><text x="30.4797%" y="271.50">rust_1brc::read_line</text></g><g><title>core::str::&lt;impl str&gt;::split (591 samples, 0.47%)</title><rect x="66.2851%" y="245" width="0.4672%" height="15" fill="rgb(229,68,48)" fg:x="83856" fg:w="591"/><text x="66.5351%" y="255.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (723 samples, 0.57%)</title><rect x="66.7523%" y="261" width="0.5715%" height="15" fill="rgb(252,8,32)" fg:x="84447" fg:w="723"/><text x="67.0023%" y="271.50"></text></g><g><title>rust_1brc::calculate_station_values::_{{closure}} (723 samples, 0.57%)</title><rect x="66.7523%" y="245" width="0.5715%" height="15" fill="rgb(223,20,43)" fg:x="84447" fg:w="723"/><text x="67.0023%" y="255.50"></text></g><g><title>__rdl_dealloc (296 samples, 0.23%)</title><rect x="67.4669%" y="85" width="0.2340%" height="15" fill="rgb(229,81,49)" fg:x="85351" fg:w="296"/><text x="67.7169%" y="95.50"></text></g><g><title>__rust_dealloc (362 samples, 0.29%)</title><rect x="67.7009%" y="85" width="0.2861%" height="15" fill="rgb(236,28,36)" fg:x="85647" fg:w="362"/><text x="67.9509%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (3,707 samples, 2.93%)</title><rect x="67.3404%" y="101" width="2.9302%" height="15" fill="rgb(249,185,26)" fg:x="85191" fg:w="3707"/><text x="67.5904%" y="111.50">al..</text></g><g><title>cfree (2,889 samples, 2.28%)</title><rect x="67.9870%" y="85" width="2.2837%" height="15" fill="rgb(249,174,33)" fg:x="86009" fg:w="2889"/><text x="68.2370%" y="95.50">c..</text></g><g><title>[libc.so.6] (2,038 samples, 1.61%)</title><rect x="68.6597%" y="69" width="1.6110%" height="15" fill="rgb(233,201,37)" fg:x="86860" fg:w="2038"/><text x="68.9097%" y="79.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (3,741 samples, 2.96%)</title><rect x="67.3238%" y="261" width="2.9571%" height="15" fill="rgb(221,78,26)" fg:x="85170" fg:w="3741"/><text x="67.5738%" y="271.50">std..</text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (3,741 samples, 2.96%)</title><rect x="67.3238%" y="245" width="2.9571%" height="15" fill="rgb(250,127,30)" fg:x="85170" fg:w="3741"/><text x="67.5738%" y="255.50">std..</text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (3,741 samples, 2.96%)</title><rect x="67.3238%" y="229" width="2.9571%" height="15" fill="rgb(230,49,44)" fg:x="85170" fg:w="3741"/><text x="67.5738%" y="239.50">has..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::string::String,rust_1brc::StationValues&gt;&gt; (3,741 samples, 2.96%)</title><rect x="67.3238%" y="213" width="2.9571%" height="15" fill="rgb(229,67,23)" fg:x="85170" fg:w="3741"/><text x="67.5738%" y="223.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (3,741 samples, 2.96%)</title><rect x="67.3238%" y="197" width="2.9571%" height="15" fill="rgb(249,83,47)" fg:x="85170" fg:w="3741"/><text x="67.5738%" y="207.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3,720 samples, 2.94%)</title><rect x="67.3404%" y="181" width="2.9405%" height="15" fill="rgb(215,43,3)" fg:x="85191" fg:w="3720"/><text x="67.5904%" y="191.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,720 samples, 2.94%)</title><rect x="67.3404%" y="165" width="2.9405%" height="15" fill="rgb(238,154,13)" fg:x="85191" fg:w="3720"/><text x="67.5904%" y="175.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,720 samples, 2.94%)</title><rect x="67.3404%" y="149" width="2.9405%" height="15" fill="rgb(219,56,2)" fg:x="85191" fg:w="3720"/><text x="67.5904%" y="159.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,720 samples, 2.94%)</title><rect x="67.3404%" y="133" width="2.9405%" height="15" fill="rgb(233,0,4)" fg:x="85191" fg:w="3720"/><text x="67.5904%" y="143.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,720 samples, 2.94%)</title><rect x="67.3404%" y="117" width="2.9405%" height="15" fill="rgb(235,30,7)" fg:x="85191" fg:w="3720"/><text x="67.5904%" y="127.50">&lt;a..</text></g><g><title>rust_1brc::main (13 samples, 0.01%)</title><rect x="70.2707%" y="101" width="0.0103%" height="15" fill="rgb(250,79,13)" fg:x="88898" fg:w="13"/><text x="70.5207%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (576 samples, 0.46%)</title><rect x="73.2468%" y="133" width="0.4553%" height="15" fill="rgb(211,146,34)" fg:x="92663" fg:w="576"/><text x="73.4968%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,380 samples, 1.09%)</title><rect x="72.8325%" y="149" width="1.0908%" height="15" fill="rgb(228,22,38)" fg:x="92139" fg:w="1380"/><text x="73.0825%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (280 samples, 0.22%)</title><rect x="73.7021%" y="133" width="0.2213%" height="15" fill="rgb(235,168,5)" fg:x="93239" fg:w="280"/><text x="73.9521%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,839 samples, 2.24%)</title><rect x="74.3811%" y="133" width="2.2441%" height="15" fill="rgb(221,155,16)" fg:x="94098" fg:w="2839"/><text x="74.6311%" y="143.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6,341 samples, 5.01%)</title><rect x="72.0136%" y="165" width="5.0123%" height="15" fill="rgb(215,215,53)" fg:x="91103" fg:w="6341"/><text x="72.2636%" y="175.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,925 samples, 3.10%)</title><rect x="73.9234%" y="149" width="3.1026%" height="15" fill="rgb(223,4,10)" fg:x="93519" fg:w="3925"/><text x="74.1734%" y="159.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (507 samples, 0.40%)</title><rect x="76.6252%" y="133" width="0.4008%" height="15" fill="rgb(234,103,6)" fg:x="96937" fg:w="507"/><text x="76.8752%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7,888 samples, 6.24%)</title><rect x="72.0136%" y="197" width="6.2352%" height="15" fill="rgb(227,97,0)" fg:x="91103" fg:w="7888"/><text x="72.2636%" y="207.50">&lt;std::ha..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7,888 samples, 6.24%)</title><rect x="72.0136%" y="181" width="6.2352%" height="15" fill="rgb(234,150,53)" fg:x="91103" fg:w="7888"/><text x="72.2636%" y="191.50">&lt;core::h..</text></g><g><title>core::hash::BuildHasher::hash_one (1,547 samples, 1.22%)</title><rect x="77.0260%" y="165" width="1.2228%" height="15" fill="rgb(228,201,54)" fg:x="97444" fg:w="1547"/><text x="77.2760%" y="175.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (620 samples, 0.49%)</title><rect x="78.2488%" y="197" width="0.4901%" height="15" fill="rgb(222,22,37)" fg:x="98991" fg:w="620"/><text x="78.4988%" y="207.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (361 samples, 0.29%)</title><rect x="78.4535%" y="181" width="0.2854%" height="15" fill="rgb(237,53,32)" fg:x="99250" fg:w="361"/><text x="78.7035%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (361 samples, 0.29%)</title><rect x="78.4535%" y="165" width="0.2854%" height="15" fill="rgb(233,25,53)" fg:x="99250" fg:w="361"/><text x="78.7035%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (361 samples, 0.29%)</title><rect x="78.4535%" y="149" width="0.2854%" height="15" fill="rgb(210,40,34)" fg:x="99250" fg:w="361"/><text x="78.7035%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (76 samples, 0.06%)</title><rect x="78.7389%" y="197" width="0.0601%" height="15" fill="rgb(241,220,44)" fg:x="99611" fg:w="76"/><text x="78.9889%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.02%)</title><rect x="80.8004%" y="69" width="0.0166%" height="15" fill="rgb(235,28,35)" fg:x="102219" fg:w="21"/><text x="81.0504%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (415 samples, 0.33%)</title><rect x="80.8178%" y="69" width="0.3280%" height="15" fill="rgb(210,56,17)" fg:x="102241" fg:w="415"/><text x="81.0678%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (676 samples, 0.53%)</title><rect x="80.7293%" y="85" width="0.5344%" height="15" fill="rgb(224,130,29)" fg:x="102129" fg:w="676"/><text x="80.9793%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (149 samples, 0.12%)</title><rect x="81.1459%" y="69" width="0.1178%" height="15" fill="rgb(235,212,8)" fg:x="102656" fg:w="149"/><text x="81.3959%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (26 samples, 0.02%)</title><rect x="81.8328%" y="69" width="0.0206%" height="15" fill="rgb(223,33,50)" fg:x="103525" fg:w="26"/><text x="82.0828%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (803 samples, 0.63%)</title><rect x="81.2636%" y="85" width="0.6347%" height="15" fill="rgb(219,149,13)" fg:x="102805" fg:w="803"/><text x="81.5136%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (57 samples, 0.05%)</title><rect x="81.8533%" y="69" width="0.0451%" height="15" fill="rgb(250,156,29)" fg:x="103551" fg:w="57"/><text x="82.1033%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,817 samples, 3.02%)</title><rect x="78.8946%" y="101" width="3.0172%" height="15" fill="rgb(216,193,19)" fg:x="99808" fg:w="3817"/><text x="79.1446%" y="111.50">&lt;co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="81.8984%" y="85" width="0.0134%" height="15" fill="rgb(216,135,14)" fg:x="103608" fg:w="17"/><text x="82.1484%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.01%)</title><rect x="83.6690%" y="69" width="0.0111%" height="15" fill="rgb(241,47,5)" fg:x="105848" fg:w="14"/><text x="83.9190%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (92 samples, 0.07%)</title><rect x="83.7465%" y="53" width="0.0727%" height="15" fill="rgb(233,42,35)" fg:x="105946" fg:w="92"/><text x="83.9965%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (266 samples, 0.21%)</title><rect x="83.6801%" y="69" width="0.2103%" height="15" fill="rgb(231,13,6)" fg:x="105862" fg:w="266"/><text x="83.9301%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (90 samples, 0.07%)</title><rect x="83.8192%" y="53" width="0.0711%" height="15" fill="rgb(207,181,40)" fg:x="106038" fg:w="90"/><text x="84.0692%" y="63.50"></text></g><g><title>core::cmp::min (189 samples, 0.15%)</title><rect x="83.8903%" y="69" width="0.1494%" height="15" fill="rgb(254,173,49)" fg:x="106128" fg:w="189"/><text x="84.1403%" y="79.50"></text></g><g><title>core::cmp::Ord::min (189 samples, 0.15%)</title><rect x="83.8903%" y="53" width="0.1494%" height="15" fill="rgb(221,1,38)" fg:x="106128" fg:w="189"/><text x="84.1403%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (189 samples, 0.15%)</title><rect x="83.8903%" y="37" width="0.1494%" height="15" fill="rgb(206,124,46)" fg:x="106128" fg:w="189"/><text x="84.1403%" y="47.50"></text></g><g><title>hashbrown::map::make_hash (16,561 samples, 13.09%)</title><rect x="71.6816%" y="229" width="13.0909%" height="15" fill="rgb(249,21,11)" fg:x="90683" fg:w="16561"/><text x="71.9316%" y="239.50">hashbrown::map::make..</text></g><g><title>core::hash::BuildHasher::hash_one (16,470 samples, 13.02%)</title><rect x="71.7536%" y="213" width="13.0189%" height="15" fill="rgb(222,201,40)" fg:x="90774" fg:w="16470"/><text x="72.0036%" y="223.50">core::hash::BuildHas..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7,557 samples, 5.97%)</title><rect x="78.7990%" y="197" width="5.9735%" height="15" fill="rgb(235,61,29)" fg:x="99687" fg:w="7557"/><text x="79.0490%" y="207.50">core::ha..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (7,501 samples, 5.93%)</title><rect x="78.8432%" y="181" width="5.9293%" height="15" fill="rgb(219,207,3)" fg:x="99743" fg:w="7501"/><text x="79.0932%" y="191.50">&lt;alloc::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (7,501 samples, 5.93%)</title><rect x="78.8432%" y="165" width="5.9293%" height="15" fill="rgb(222,56,46)" fg:x="99743" fg:w="7501"/><text x="79.0932%" y="175.50">core::ha..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (7,501 samples, 5.93%)</title><rect x="78.8432%" y="149" width="5.9293%" height="15" fill="rgb(239,76,54)" fg:x="99743" fg:w="7501"/><text x="79.0932%" y="159.50">&lt;std::ha..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (7,501 samples, 5.93%)</title><rect x="78.8432%" y="133" width="5.9293%" height="15" fill="rgb(231,124,27)" fg:x="99743" fg:w="7501"/><text x="79.0932%" y="143.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (7,501 samples, 5.93%)</title><rect x="78.8432%" y="117" width="5.9293%" height="15" fill="rgb(249,195,6)" fg:x="99743" fg:w="7501"/><text x="79.0932%" y="127.50">&lt;core::h..</text></g><g><title>core::hash::Hasher::write_u8 (3,619 samples, 2.86%)</title><rect x="81.9118%" y="101" width="2.8607%" height="15" fill="rgb(237,174,47)" fg:x="103625" fg:w="3619"/><text x="82.1618%" y="111.50">co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,375 samples, 2.67%)</title><rect x="82.1047%" y="85" width="2.6678%" height="15" fill="rgb(206,201,31)" fg:x="103869" fg:w="3375"/><text x="82.3547%" y="95.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (927 samples, 0.73%)</title><rect x="84.0397%" y="69" width="0.7328%" height="15" fill="rgb(231,57,52)" fg:x="106317" fg:w="927"/><text x="84.2897%" y="79.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (32 samples, 0.03%)</title><rect x="86.2499%" y="165" width="0.0253%" height="15" fill="rgb(248,177,22)" fg:x="109113" fg:w="32"/><text x="86.4999%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="86.2499%" y="197" width="0.0277%" height="15" fill="rgb(215,211,37)" fg:x="109113" fg:w="35"/><text x="86.4999%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (35 samples, 0.03%)</title><rect x="86.2499%" y="181" width="0.0277%" height="15" fill="rgb(241,128,51)" fg:x="109113" fg:w="35"/><text x="86.4999%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (547 samples, 0.43%)</title><rect x="86.2783%" y="181" width="0.4324%" height="15" fill="rgb(227,165,31)" fg:x="109149" fg:w="547"/><text x="86.5283%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (547 samples, 0.43%)</title><rect x="86.2783%" y="165" width="0.4324%" height="15" fill="rgb(228,167,24)" fg:x="109149" fg:w="547"/><text x="86.5283%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (547 samples, 0.43%)</title><rect x="86.2783%" y="149" width="0.4324%" height="15" fill="rgb(228,143,12)" fg:x="109149" fg:w="547"/><text x="86.5283%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (277 samples, 0.22%)</title><rect x="86.4918%" y="133" width="0.2190%" height="15" fill="rgb(249,149,8)" fg:x="109419" fg:w="277"/><text x="86.7418%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (9,752 samples, 7.71%)</title><rect x="86.2775%" y="197" width="7.7086%" height="15" fill="rgb(243,35,44)" fg:x="109148" fg:w="9752"/><text x="86.5275%" y="207.50">hashbrown::..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (9,204 samples, 7.28%)</title><rect x="86.7107%" y="181" width="7.2754%" height="15" fill="rgb(246,89,9)" fg:x="109696" fg:w="9204"/><text x="86.9607%" y="191.50">hashbrown:..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (9,204 samples, 7.28%)</title><rect x="86.7107%" y="165" width="7.2754%" height="15" fill="rgb(233,213,13)" fg:x="109696" fg:w="9204"/><text x="86.9607%" y="175.50">&lt;alloc::st..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (9,204 samples, 7.28%)</title><rect x="86.7107%" y="149" width="7.2754%" height="15" fill="rgb(233,141,41)" fg:x="109696" fg:w="9204"/><text x="86.9607%" y="159.50">alloc::vec..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (9,204 samples, 7.28%)</title><rect x="86.7107%" y="133" width="7.2754%" height="15" fill="rgb(239,167,4)" fg:x="109696" fg:w="9204"/><text x="86.9607%" y="143.50">core::slic..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9,204 samples, 7.28%)</title><rect x="86.7107%" y="117" width="7.2754%" height="15" fill="rgb(209,217,16)" fg:x="109696" fg:w="9204"/><text x="86.9607%" y="127.50">&lt;[A] as co..</text></g><g><title>[libc.so.6] (6,225 samples, 4.92%)</title><rect x="89.0655%" y="101" width="4.9206%" height="15" fill="rgb(219,88,35)" fg:x="112675" fg:w="6225"/><text x="89.3155%" y="111.50">[libc...</text></g><g><title>hashbrown::raw::h2 (1,988 samples, 1.57%)</title><rect x="93.9862%" y="197" width="1.5714%" height="15" fill="rgb(220,193,23)" fg:x="118900" fg:w="1988"/><text x="94.2362%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (87 samples, 0.07%)</title><rect x="95.5576%" y="197" width="0.0688%" height="15" fill="rgb(230,90,52)" fg:x="120888" fg:w="87"/><text x="95.8076%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (87 samples, 0.07%)</title><rect x="95.5576%" y="181" width="0.0688%" height="15" fill="rgb(252,106,19)" fg:x="120888" fg:w="87"/><text x="95.8076%" y="191.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (84 samples, 0.07%)</title><rect x="95.5600%" y="165" width="0.0664%" height="15" fill="rgb(206,74,20)" fg:x="120891" fg:w="84"/><text x="95.8100%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,523 samples, 1.99%)</title><rect x="95.6264%" y="197" width="1.9943%" height="15" fill="rgb(230,138,44)" fg:x="120975" fg:w="2523"/><text x="95.8764%" y="207.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,523 samples, 1.99%)</title><rect x="95.6264%" y="181" width="1.9943%" height="15" fill="rgb(235,182,43)" fg:x="120975" fg:w="2523"/><text x="95.8764%" y="191.50">c..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (323 samples, 0.26%)</title><rect x="97.6207%" y="197" width="0.2553%" height="15" fill="rgb(242,16,51)" fg:x="123498" fg:w="323"/><text x="97.8707%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (323 samples, 0.26%)</title><rect x="97.6207%" y="181" width="0.2553%" height="15" fill="rgb(248,9,4)" fg:x="123498" fg:w="323"/><text x="97.8707%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (323 samples, 0.26%)</title><rect x="97.6207%" y="165" width="0.2553%" height="15" fill="rgb(210,31,22)" fg:x="123498" fg:w="323"/><text x="97.8707%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (16,965 samples, 13.41%)</title><rect x="84.7741%" y="213" width="13.4102%" height="15" fill="rgb(239,54,39)" fg:x="107246" fg:w="16965"/><text x="85.0241%" y="223.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (390 samples, 0.31%)</title><rect x="97.8760%" y="197" width="0.3083%" height="15" fill="rgb(230,99,41)" fg:x="123821" fg:w="390"/><text x="98.1260%" y="207.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (35,084 samples, 27.73%)</title><rect x="70.4691%" y="245" width="27.7326%" height="15" fill="rgb(253,106,12)" fg:x="89149" fg:w="35084"/><text x="70.7191%" y="255.50">hashbrown::rustc_entry::&lt;impl hashbrown::map:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16,989 samples, 13.43%)</title><rect x="84.7725%" y="229" width="13.4292%" height="15" fill="rgb(213,46,41)" fg:x="107244" fg:w="16989"/><text x="85.0225%" y="239.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (22 samples, 0.02%)</title><rect x="98.1843%" y="213" width="0.0174%" height="15" fill="rgb(215,133,35)" fg:x="124211" fg:w="22"/><text x="98.4343%" y="223.50"></text></g><g><title>rust_1brc::main (533 samples, 0.42%)</title><rect x="98.2017%" y="245" width="0.4213%" height="15" fill="rgb(213,28,5)" fg:x="124233" fg:w="533"/><text x="98.4517%" y="255.50"></text></g><g><title>rust_1brc::calculate_station_values (124,959 samples, 98.78%)</title><rect x="0.0063%" y="277" width="98.7756%" height="15" fill="rgb(215,77,49)" fg:x="8" fg:w="124959"/><text x="0.2563%" y="287.50">rust_1brc::calculate_station_values</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (36,056 samples, 28.50%)</title><rect x="70.2809%" y="261" width="28.5010%" height="15" fill="rgb(248,100,22)" fg:x="88911" fg:w="36056"/><text x="70.5309%" y="271.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::e..</text></g><g><title>std::collections::hash::map::map_entry (201 samples, 0.16%)</title><rect x="98.6230%" y="245" width="0.1589%" height="15" fill="rgb(208,67,9)" fg:x="124766" fg:w="201"/><text x="98.8730%" y="255.50"></text></g><g><title>rust_1brc::main (212 samples, 0.17%)</title><rect x="98.7819%" y="277" width="0.1676%" height="15" fill="rgb(219,133,21)" fg:x="124967" fg:w="212"/><text x="99.0319%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (1,306 samples, 1.03%)</title><rect x="98.9495%" y="245" width="1.0323%" height="15" fill="rgb(246,46,29)" fg:x="125179" fg:w="1306"/><text x="99.1995%" y="255.50"></text></g><g><title>core::str::validations::run_utf8_validation (1,305 samples, 1.03%)</title><rect x="98.9503%" y="229" width="1.0316%" height="15" fill="rgb(246,185,52)" fg:x="125180" fg:w="1305"/><text x="99.2003%" y="239.50"></text></g><g><title>core::str::validations::utf8_char_width (74 samples, 0.06%)</title><rect x="99.9233%" y="213" width="0.0585%" height="15" fill="rgb(252,136,11)" fg:x="126411" fg:w="74"/><text x="100.1733%" y="223.50"></text></g><g><title>all (126,508 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(219,138,53)" fg:x="0" fg:w="126508"/><text x="0.2500%" y="463.50"></text></g><g><title>rust-1brc (126,508 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(211,51,23)" fg:x="0" fg:w="126508"/><text x="0.2500%" y="447.50">rust-1brc</text></g><g><title>_start (126,501 samples, 99.99%)</title><rect x="0.0055%" y="421" width="99.9945%" height="15" fill="rgb(247,221,28)" fg:x="7" fg:w="126501"/><text x="0.2555%" y="431.50">_start</text></g><g><title>__libc_start_main (126,501 samples, 99.99%)</title><rect x="0.0055%" y="405" width="99.9945%" height="15" fill="rgb(251,222,45)" fg:x="7" fg:w="126501"/><text x="0.2555%" y="415.50">__libc_start_main</text></g><g><title>[libc.so.6] (126,501 samples, 99.99%)</title><rect x="0.0055%" y="389" width="99.9945%" height="15" fill="rgb(217,162,53)" fg:x="7" fg:w="126501"/><text x="0.2555%" y="399.50">[libc.so.6]</text></g><g><title>main (126,501 samples, 99.99%)</title><rect x="0.0055%" y="373" width="99.9945%" height="15" fill="rgb(229,93,14)" fg:x="7" fg:w="126501"/><text x="0.2555%" y="383.50">main</text></g><g><title>std::rt::lang_start_internal (126,501 samples, 99.99%)</title><rect x="0.0055%" y="357" width="99.9945%" height="15" fill="rgb(209,67,49)" fg:x="7" fg:w="126501"/><text x="0.2555%" y="367.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (126,501 samples, 99.99%)</title><rect x="0.0055%" y="341" width="99.9945%" height="15" fill="rgb(213,87,29)" fg:x="7" fg:w="126501"/><text x="0.2555%" y="351.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (126,501 samples, 99.99%)</title><rect x="0.0055%" y="325" width="99.9945%" height="15" fill="rgb(205,151,52)" fg:x="7" fg:w="126501"/><text x="0.2555%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (126,501 samples, 99.99%)</title><rect x="0.0055%" y="309" width="99.9945%" height="15" fill="rgb(253,215,39)" fg:x="7" fg:w="126501"/><text x="0.2555%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>rust_1brc::main (126,501 samples, 99.99%)</title><rect x="0.0055%" y="293" width="99.9945%" height="15" fill="rgb(221,220,41)" fg:x="7" fg:w="126501"/><text x="0.2555%" y="303.50">rust_1brc::main</text></g><g><title>std::fs::read_to_string (1,329 samples, 1.05%)</title><rect x="98.9495%" y="277" width="1.0505%" height="15" fill="rgb(218,133,21)" fg:x="125179" fg:w="1329"/><text x="99.1995%" y="287.50"></text></g><g><title>std::fs::read_to_string::inner (1,329 samples, 1.05%)</title><rect x="98.9495%" y="261" width="1.0505%" height="15" fill="rgb(221,193,43)" fg:x="125179" fg:w="1329"/><text x="99.1995%" y="271.50"></text></g><g><title>std::io::default_read_to_end (23 samples, 0.02%)</title><rect x="99.9818%" y="245" width="0.0182%" height="15" fill="rgb(240,128,52)" fg:x="126485" fg:w="23"/><text x="100.2318%" y="255.50"></text></g></svg></svg>