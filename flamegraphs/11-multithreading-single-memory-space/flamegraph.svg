<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="94853"><g><title>[unknown] (28 samples, 0.03%)</title><rect x="0.0232%" y="501" width="0.0295%" height="15" fill="rgb(227,0,7)" fg:x="22" fg:w="28"/><text x="0.2732%" y="511.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="0.0316%" y="485" width="0.0211%" height="15" fill="rgb(217,0,24)" fg:x="30" fg:w="20"/><text x="0.2816%" y="495.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="0.0390%" y="469" width="0.0137%" height="15" fill="rgb(221,193,54)" fg:x="37" fg:w="13"/><text x="0.2890%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (16 samples, 0.02%)</title><rect x="0.0727%" y="245" width="0.0169%" height="15" fill="rgb(248,212,6)" fg:x="69" fg:w="16"/><text x="0.3227%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (16 samples, 0.02%)</title><rect x="0.0727%" y="229" width="0.0169%" height="15" fill="rgb(208,68,35)" fg:x="69" fg:w="16"/><text x="0.3227%" y="239.50"></text></g><g><title>core::mem::replace (16 samples, 0.02%)</title><rect x="0.0727%" y="213" width="0.0169%" height="15" fill="rgb(232,128,0)" fg:x="69" fg:w="16"/><text x="0.3227%" y="223.50"></text></g><g><title>core::ptr::read (16 samples, 0.02%)</title><rect x="0.0727%" y="197" width="0.0169%" height="15" fill="rgb(207,160,47)" fg:x="69" fg:w="16"/><text x="0.3227%" y="207.50"></text></g><g><title>&lt;crossbeam_channel::select::Selected as core::convert::From&lt;usize&gt;&gt;::from (42 samples, 0.04%)</title><rect x="0.0980%" y="197" width="0.0443%" height="15" fill="rgb(228,23,34)" fg:x="93" fg:w="42"/><text x="0.3480%" y="207.50"></text></g><g><title>__sched_yield (40 samples, 0.04%)</title><rect x="0.1476%" y="181" width="0.0422%" height="15" fill="rgb(218,30,26)" fg:x="140" fg:w="40"/><text x="0.3976%" y="191.50"></text></g><g><title>[unknown] (39 samples, 0.04%)</title><rect x="0.1487%" y="165" width="0.0411%" height="15" fill="rgb(220,122,19)" fg:x="141" fg:w="39"/><text x="0.3987%" y="175.50"></text></g><g><title>[unknown] (37 samples, 0.04%)</title><rect x="0.1508%" y="149" width="0.0390%" height="15" fill="rgb(250,228,42)" fg:x="143" fg:w="37"/><text x="0.4008%" y="159.50"></text></g><g><title>[unknown] (37 samples, 0.04%)</title><rect x="0.1508%" y="133" width="0.0390%" height="15" fill="rgb(240,193,28)" fg:x="143" fg:w="37"/><text x="0.4008%" y="143.50"></text></g><g><title>[unknown] (37 samples, 0.04%)</title><rect x="0.1508%" y="117" width="0.0390%" height="15" fill="rgb(216,20,37)" fg:x="143" fg:w="37"/><text x="0.4008%" y="127.50"></text></g><g><title>[unknown] (34 samples, 0.04%)</title><rect x="0.1539%" y="101" width="0.0358%" height="15" fill="rgb(206,188,39)" fg:x="146" fg:w="34"/><text x="0.4039%" y="111.50"></text></g><g><title>[unknown] (29 samples, 0.03%)</title><rect x="0.1592%" y="85" width="0.0306%" height="15" fill="rgb(217,207,13)" fg:x="151" fg:w="29"/><text x="0.4092%" y="95.50"></text></g><g><title>[unknown] (24 samples, 0.03%)</title><rect x="0.1645%" y="69" width="0.0253%" height="15" fill="rgb(231,73,38)" fg:x="156" fg:w="24"/><text x="0.4145%" y="79.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="0.1697%" y="53" width="0.0200%" height="15" fill="rgb(225,20,46)" fg:x="161" fg:w="19"/><text x="0.4197%" y="63.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="0.1750%" y="37" width="0.0148%" height="15" fill="rgb(210,31,41)" fg:x="166" fg:w="14"/><text x="0.4250%" y="47.50"></text></g><g><title>core::hint::spin_loop (242 samples, 0.26%)</title><rect x="0.1898%" y="181" width="0.2551%" height="15" fill="rgb(221,200,47)" fg:x="180" fg:w="242"/><text x="0.4398%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (242 samples, 0.26%)</title><rect x="0.1898%" y="165" width="0.2551%" height="15" fill="rgb(226,26,5)" fg:x="180" fg:w="242"/><text x="0.4398%" y="175.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (285 samples, 0.30%)</title><rect x="0.1476%" y="197" width="0.3005%" height="15" fill="rgb(249,33,26)" fg:x="140" fg:w="285"/><text x="0.3976%" y="207.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (398 samples, 0.42%)</title><rect x="0.0727%" y="261" width="0.4196%" height="15" fill="rgb(235,183,28)" fg:x="69" fg:w="398"/><text x="0.3227%" y="271.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (382 samples, 0.40%)</title><rect x="0.0896%" y="245" width="0.4027%" height="15" fill="rgb(221,5,38)" fg:x="85" fg:w="382"/><text x="0.3396%" y="255.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::_{{closure}} (378 samples, 0.40%)</title><rect x="0.0938%" y="229" width="0.3985%" height="15" fill="rgb(247,18,42)" fg:x="89" fg:w="378"/><text x="0.3438%" y="239.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (376 samples, 0.40%)</title><rect x="0.0959%" y="213" width="0.3964%" height="15" fill="rgb(241,131,45)" fg:x="91" fg:w="376"/><text x="0.3459%" y="223.50"></text></g><g><title>std::thread::park (42 samples, 0.04%)</title><rect x="0.4481%" y="197" width="0.0443%" height="15" fill="rgb(249,31,29)" fg:x="425" fg:w="42"/><text x="0.6981%" y="207.50"></text></g><g><title>syscall (14 samples, 0.01%)</title><rect x="0.4776%" y="181" width="0.0148%" height="15" fill="rgb(225,111,53)" fg:x="453" fg:w="14"/><text x="0.7276%" y="191.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="0.4776%" y="165" width="0.0148%" height="15" fill="rgb(238,160,17)" fg:x="453" fg:w="14"/><text x="0.7276%" y="175.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="0.4776%" y="149" width="0.0148%" height="15" fill="rgb(214,148,48)" fg:x="453" fg:w="14"/><text x="0.7276%" y="159.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="0.4776%" y="133" width="0.0148%" height="15" fill="rgb(232,36,49)" fg:x="453" fg:w="14"/><text x="0.7276%" y="143.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="0.4776%" y="117" width="0.0148%" height="15" fill="rgb(209,103,24)" fg:x="453" fg:w="14"/><text x="0.7276%" y="127.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="0.4776%" y="101" width="0.0148%" height="15" fill="rgb(229,88,8)" fg:x="453" fg:w="14"/><text x="0.7276%" y="111.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="0.4786%" y="85" width="0.0137%" height="15" fill="rgb(213,181,19)" fg:x="454" fg:w="13"/><text x="0.7286%" y="95.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="0.4818%" y="69" width="0.0105%" height="15" fill="rgb(254,191,54)" fg:x="457" fg:w="10"/><text x="0.7318%" y="79.50"></text></g><g><title>crossbeam_channel::context::Context::with (399 samples, 0.42%)</title><rect x="0.0727%" y="293" width="0.4207%" height="15" fill="rgb(241,83,37)" fg:x="69" fg:w="399"/><text x="0.3227%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (399 samples, 0.42%)</title><rect x="0.0727%" y="277" width="0.4207%" height="15" fill="rgb(233,36,39)" fg:x="69" fg:w="399"/><text x="0.3227%" y="287.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::read (16 samples, 0.02%)</title><rect x="0.4934%" y="293" width="0.0169%" height="15" fill="rgb(226,3,54)" fg:x="468" fg:w="16"/><text x="0.7434%" y="303.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (15 samples, 0.02%)</title><rect x="0.4944%" y="277" width="0.0158%" height="15" fill="rgb(245,192,40)" fg:x="469" fg:w="15"/><text x="0.7444%" y="287.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_recv (98 samples, 0.10%)</title><rect x="0.5103%" y="293" width="0.1033%" height="15" fill="rgb(238,167,29)" fg:x="484" fg:w="98"/><text x="0.7603%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (48 samples, 0.05%)</title><rect x="0.5630%" y="277" width="0.0506%" height="15" fill="rgb(232,182,51)" fg:x="534" fg:w="48"/><text x="0.8130%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (48 samples, 0.05%)</title><rect x="0.5630%" y="261" width="0.0506%" height="15" fill="rgb(231,60,39)" fg:x="534" fg:w="48"/><text x="0.8130%" y="271.50"></text></g><g><title>__sched_yield (63 samples, 0.07%)</title><rect x="0.6199%" y="277" width="0.0664%" height="15" fill="rgb(208,69,12)" fg:x="588" fg:w="63"/><text x="0.8699%" y="287.50"></text></g><g><title>[unknown] (61 samples, 0.06%)</title><rect x="0.6220%" y="261" width="0.0643%" height="15" fill="rgb(235,93,37)" fg:x="590" fg:w="61"/><text x="0.8720%" y="271.50"></text></g><g><title>[unknown] (59 samples, 0.06%)</title><rect x="0.6241%" y="245" width="0.0622%" height="15" fill="rgb(213,116,39)" fg:x="592" fg:w="59"/><text x="0.8741%" y="255.50"></text></g><g><title>[unknown] (54 samples, 0.06%)</title><rect x="0.6294%" y="229" width="0.0569%" height="15" fill="rgb(222,207,29)" fg:x="597" fg:w="54"/><text x="0.8794%" y="239.50"></text></g><g><title>[unknown] (53 samples, 0.06%)</title><rect x="0.6304%" y="213" width="0.0559%" height="15" fill="rgb(206,96,30)" fg:x="598" fg:w="53"/><text x="0.8804%" y="223.50"></text></g><g><title>[unknown] (42 samples, 0.04%)</title><rect x="0.6420%" y="197" width="0.0443%" height="15" fill="rgb(218,138,4)" fg:x="609" fg:w="42"/><text x="0.8920%" y="207.50"></text></g><g><title>[unknown] (38 samples, 0.04%)</title><rect x="0.6463%" y="181" width="0.0401%" height="15" fill="rgb(250,191,14)" fg:x="613" fg:w="38"/><text x="0.8963%" y="191.50"></text></g><g><title>[unknown] (30 samples, 0.03%)</title><rect x="0.6547%" y="165" width="0.0316%" height="15" fill="rgb(239,60,40)" fg:x="621" fg:w="30"/><text x="0.9047%" y="175.50"></text></g><g><title>[unknown] (24 samples, 0.03%)</title><rect x="0.6610%" y="149" width="0.0253%" height="15" fill="rgb(206,27,48)" fg:x="627" fg:w="24"/><text x="0.9110%" y="159.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="0.6631%" y="133" width="0.0232%" height="15" fill="rgb(225,35,8)" fg:x="629" fg:w="22"/><text x="0.9131%" y="143.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="0.6758%" y="117" width="0.0105%" height="15" fill="rgb(250,213,24)" fg:x="641" fg:w="10"/><text x="0.9258%" y="127.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (350 samples, 0.37%)</title><rect x="0.6863%" y="277" width="0.3690%" height="15" fill="rgb(247,123,22)" fg:x="651" fg:w="350"/><text x="0.9363%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (350 samples, 0.37%)</title><rect x="0.6863%" y="261" width="0.3690%" height="15" fill="rgb(231,138,38)" fg:x="651" fg:w="350"/><text x="0.9363%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (331 samples, 0.35%)</title><rect x="0.7064%" y="245" width="0.3490%" height="15" fill="rgb(231,145,46)" fg:x="670" fg:w="331"/><text x="0.9564%" y="255.50"></text></g><g><title>&lt;crossbeam_channel::channel::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (941 samples, 0.99%)</title><rect x="0.0643%" y="341" width="0.9921%" height="15" fill="rgb(251,118,11)" fg:x="61" fg:w="941"/><text x="0.3143%" y="351.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (941 samples, 0.99%)</title><rect x="0.0643%" y="325" width="0.9921%" height="15" fill="rgb(217,147,25)" fg:x="61" fg:w="941"/><text x="0.3143%" y="335.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (940 samples, 0.99%)</title><rect x="0.0654%" y="309" width="0.9910%" height="15" fill="rgb(247,81,37)" fg:x="62" fg:w="940"/><text x="0.3154%" y="319.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (419 samples, 0.44%)</title><rect x="0.6146%" y="293" width="0.4417%" height="15" fill="rgb(209,12,38)" fg:x="583" fg:w="419"/><text x="0.8646%" y="303.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="1.1344%" y="245" width="0.0169%" height="15" fill="rgb(227,1,9)" fg:x="1076" fg:w="16"/><text x="1.3844%" y="255.50"></text></g><g><title>[libc.so.6] (96 samples, 0.10%)</title><rect x="1.0638%" y="261" width="0.1012%" height="15" fill="rgb(248,47,43)" fg:x="1009" fg:w="96"/><text x="1.3138%" y="271.50"></text></g><g><title>cfree (150 samples, 0.16%)</title><rect x="1.0574%" y="277" width="0.1581%" height="15" fill="rgb(221,10,30)" fg:x="1003" fg:w="150"/><text x="1.3074%" y="287.50"></text></g><g><title>__lll_lock_wake_private (48 samples, 0.05%)</title><rect x="1.1650%" y="261" width="0.0506%" height="15" fill="rgb(210,229,1)" fg:x="1105" fg:w="48"/><text x="1.4150%" y="271.50"></text></g><g><title>[unknown] (48 samples, 0.05%)</title><rect x="1.1650%" y="245" width="0.0506%" height="15" fill="rgb(222,148,37)" fg:x="1105" fg:w="48"/><text x="1.4150%" y="255.50"></text></g><g><title>[unknown] (46 samples, 0.05%)</title><rect x="1.1671%" y="229" width="0.0485%" height="15" fill="rgb(234,67,33)" fg:x="1107" fg:w="46"/><text x="1.4171%" y="239.50"></text></g><g><title>[unknown] (42 samples, 0.04%)</title><rect x="1.1713%" y="213" width="0.0443%" height="15" fill="rgb(247,98,35)" fg:x="1111" fg:w="42"/><text x="1.4213%" y="223.50"></text></g><g><title>[unknown] (38 samples, 0.04%)</title><rect x="1.1755%" y="197" width="0.0401%" height="15" fill="rgb(247,138,52)" fg:x="1115" fg:w="38"/><text x="1.4255%" y="207.50"></text></g><g><title>[unknown] (36 samples, 0.04%)</title><rect x="1.1776%" y="181" width="0.0380%" height="15" fill="rgb(213,79,30)" fg:x="1117" fg:w="36"/><text x="1.4276%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (152 samples, 0.16%)</title><rect x="1.0564%" y="341" width="0.1602%" height="15" fill="rgb(246,177,23)" fg:x="1002" fg:w="152"/><text x="1.3064%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (152 samples, 0.16%)</title><rect x="1.0564%" y="325" width="0.1602%" height="15" fill="rgb(230,62,27)" fg:x="1002" fg:w="152"/><text x="1.3064%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (151 samples, 0.16%)</title><rect x="1.0574%" y="309" width="0.1592%" height="15" fill="rgb(216,154,8)" fg:x="1003" fg:w="151"/><text x="1.3074%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (151 samples, 0.16%)</title><rect x="1.0574%" y="293" width="0.1592%" height="15" fill="rgb(244,35,45)" fg:x="1003" fg:w="151"/><text x="1.3074%" y="303.50"></text></g><g><title>__rdl_alloc (528 samples, 0.56%)</title><rect x="3.4148%" y="181" width="0.5567%" height="15" fill="rgb(251,115,12)" fg:x="3239" fg:w="528"/><text x="3.6648%" y="191.50"></text></g><g><title>__rust_alloc (522 samples, 0.55%)</title><rect x="3.9714%" y="181" width="0.5503%" height="15" fill="rgb(240,54,50)" fg:x="3767" fg:w="522"/><text x="4.2214%" y="191.50"></text></g><g><title>core::ptr::read_volatile (40 samples, 0.04%)</title><rect x="4.5217%" y="181" width="0.0422%" height="15" fill="rgb(233,84,52)" fg:x="4289" fg:w="40"/><text x="4.7717%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (10,631 samples, 11.21%)</title><rect x="1.5782%" y="277" width="11.2079%" height="15" fill="rgb(207,117,47)" fg:x="1497" fg:w="10631"/><text x="1.8282%" y="287.50">alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10,631 samples, 11.21%)</title><rect x="1.5782%" y="261" width="11.2079%" height="15" fill="rgb(249,43,39)" fg:x="1497" fg:w="10631"/><text x="1.8282%" y="271.50">alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10,631 samples, 11.21%)</title><rect x="1.5782%" y="245" width="11.2079%" height="15" fill="rgb(209,38,44)" fg:x="1497" fg:w="10631"/><text x="1.8282%" y="255.50">alloc::raw_vec::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10,610 samples, 11.19%)</title><rect x="1.6004%" y="229" width="11.1857%" height="15" fill="rgb(236,212,23)" fg:x="1518" fg:w="10610"/><text x="1.8504%" y="239.50">&lt;alloc::alloc::G..</text></g><g><title>alloc::alloc::Global::alloc_impl (10,610 samples, 11.19%)</title><rect x="1.6004%" y="213" width="11.1857%" height="15" fill="rgb(242,79,21)" fg:x="1518" fg:w="10610"/><text x="1.8504%" y="223.50">alloc::alloc::Gl..</text></g><g><title>alloc::alloc::alloc (10,610 samples, 11.19%)</title><rect x="1.6004%" y="197" width="11.1857%" height="15" fill="rgb(211,96,35)" fg:x="1518" fg:w="10610"/><text x="1.8504%" y="207.50">alloc::alloc::al..</text></g><g><title>malloc (7,799 samples, 8.22%)</title><rect x="4.5639%" y="181" width="8.2222%" height="15" fill="rgb(253,215,40)" fg:x="4329" fg:w="7799"/><text x="4.8139%" y="191.50">malloc</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13,731 samples, 14.48%)</title><rect x="1.5782%" y="325" width="14.4761%" height="15" fill="rgb(211,81,21)" fg:x="1497" fg:w="13731"/><text x="1.8282%" y="335.50">&lt;T as core::convert::I..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (13,731 samples, 14.48%)</title><rect x="1.5782%" y="309" width="14.4761%" height="15" fill="rgb(208,190,38)" fg:x="1497" fg:w="13731"/><text x="1.8282%" y="319.50">&lt;alloc::boxed::Box&lt;[T]..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as alloc::boxed::BoxFromSlice&lt;T&gt;&gt;::from_slice (13,731 samples, 14.48%)</title><rect x="1.5782%" y="293" width="14.4761%" height="15" fill="rgb(235,213,38)" fg:x="1497" fg:w="13731"/><text x="1.8282%" y="303.50">&lt;alloc::boxed::Box&lt;[T]..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3,100 samples, 3.27%)</title><rect x="12.7861%" y="277" width="3.2682%" height="15" fill="rgb(237,122,38)" fg:x="12128" fg:w="3100"/><text x="13.0361%" y="287.50">cor..</text></g><g><title>[libc.so.6] (3,083 samples, 3.25%)</title><rect x="12.8040%" y="261" width="3.2503%" height="15" fill="rgb(244,218,35)" fg:x="12145" fg:w="3083"/><text x="13.0540%" y="271.50">[li..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (778 samples, 0.82%)</title><rect x="16.0575%" y="309" width="0.8202%" height="15" fill="rgb(240,68,47)" fg:x="15231" fg:w="778"/><text x="16.3075%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,816 samples, 1.91%)</title><rect x="16.0575%" y="325" width="1.9145%" height="15" fill="rgb(210,16,53)" fg:x="15231" fg:w="1816"/><text x="16.3075%" y="335.50">c..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,038 samples, 1.09%)</title><rect x="16.8777%" y="309" width="1.0943%" height="15" fill="rgb(235,124,12)" fg:x="16009" fg:w="1038"/><text x="17.1277%" y="319.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (101 samples, 0.11%)</title><rect x="20.0268%" y="245" width="0.1065%" height="15" fill="rgb(224,169,11)" fg:x="18996" fg:w="101"/><text x="20.2768%" y="255.50"></text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::from_u64 (770 samples, 0.81%)</title><rect x="20.1333%" y="245" width="0.8118%" height="15" fill="rgb(250,166,2)" fg:x="19097" fg:w="770"/><text x="20.3833%" y="255.50"></text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::pow10_fast_path (22 samples, 0.02%)</title><rect x="20.9450%" y="245" width="0.0232%" height="15" fill="rgb(242,216,29)" fg:x="19867" fg:w="22"/><text x="21.1950%" y="255.50"></text></g><g><title>fast_float::number::Number::try_fast_path (2,835 samples, 2.99%)</title><rect x="18.5540%" y="261" width="2.9888%" height="15" fill="rgb(230,116,27)" fg:x="17599" fg:w="2835"/><text x="18.8040%" y="271.50">fas..</text></g><g><title>fast_float::number::Number::is_fast_path (544 samples, 0.57%)</title><rect x="20.9693%" y="245" width="0.5735%" height="15" fill="rgb(228,99,48)" fg:x="19890" fg:w="544"/><text x="21.2193%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (775 samples, 0.82%)</title><rect x="28.6043%" y="245" width="0.8171%" height="15" fill="rgb(253,11,6)" fg:x="27132" fg:w="775"/><text x="28.8543%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (720 samples, 0.76%)</title><rect x="28.6622%" y="229" width="0.7591%" height="15" fill="rgb(247,143,39)" fg:x="27187" fg:w="720"/><text x="28.9122%" y="239.50"></text></g><g><title>fast_float::common::AsciiStr::check_first_either (271 samples, 0.29%)</title><rect x="29.4213%" y="245" width="0.2857%" height="15" fill="rgb(236,97,10)" fg:x="27907" fg:w="271"/><text x="29.6713%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (239 samples, 0.25%)</title><rect x="29.4551%" y="229" width="0.2520%" height="15" fill="rgb(233,208,19)" fg:x="27939" fg:w="239"/><text x="29.7051%" y="239.50"></text></g><g><title>fast_float::common::AsciiStr::first (35 samples, 0.04%)</title><rect x="29.7070%" y="245" width="0.0369%" height="15" fill="rgb(216,164,2)" fg:x="28178" fg:w="35"/><text x="29.9570%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::offset_from (12 samples, 0.01%)</title><rect x="29.7439%" y="245" width="0.0127%" height="15" fill="rgb(220,129,5)" fg:x="28213" fg:w="12"/><text x="29.9939%" y="255.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (12 samples, 0.01%)</title><rect x="29.7439%" y="229" width="0.0127%" height="15" fill="rgb(242,17,10)" fg:x="28213" fg:w="12"/><text x="29.9939%" y="239.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (555 samples, 0.59%)</title><rect x="29.7566%" y="245" width="0.5851%" height="15" fill="rgb(242,107,0)" fg:x="28225" fg:w="555"/><text x="30.0066%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (555 samples, 0.59%)</title><rect x="29.7566%" y="229" width="0.5851%" height="15" fill="rgb(251,28,31)" fg:x="28225" fg:w="555"/><text x="30.0066%" y="239.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (326 samples, 0.34%)</title><rect x="29.9980%" y="213" width="0.3437%" height="15" fill="rgb(233,223,10)" fg:x="28454" fg:w="326"/><text x="30.2480%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (15 samples, 0.02%)</title><rect x="30.3259%" y="197" width="0.0158%" height="15" fill="rgb(215,21,27)" fg:x="28765" fg:w="15"/><text x="30.5759%" y="207.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (1,284 samples, 1.35%)</title><rect x="31.6047%" y="213" width="1.3537%" height="15" fill="rgb(232,23,21)" fg:x="29978" fg:w="1284"/><text x="31.8547%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::first (209 samples, 0.22%)</title><rect x="32.9584%" y="213" width="0.2203%" height="15" fill="rgb(244,5,23)" fg:x="31262" fg:w="209"/><text x="33.2084%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (743 samples, 0.78%)</title><rect x="33.1787%" y="213" width="0.7833%" height="15" fill="rgb(226,81,46)" fg:x="31471" fg:w="743"/><text x="33.4287%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::step (254 samples, 0.27%)</title><rect x="33.9620%" y="213" width="0.2678%" height="15" fill="rgb(247,70,30)" fg:x="32214" fg:w="254"/><text x="34.2120%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (254 samples, 0.27%)</title><rect x="33.9620%" y="197" width="0.2678%" height="15" fill="rgb(212,68,19)" fg:x="32214" fg:w="254"/><text x="34.2120%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (254 samples, 0.27%)</title><rect x="33.9620%" y="181" width="0.2678%" height="15" fill="rgb(240,187,13)" fg:x="32214" fg:w="254"/><text x="34.2120%" y="191.50"></text></g><g><title>fast_float::common::AsciiStr::parse_digits (4,340 samples, 4.58%)</title><rect x="30.3417%" y="229" width="4.5755%" height="15" fill="rgb(223,113,26)" fg:x="28780" fg:w="4340"/><text x="30.5917%" y="239.50">fast_..</text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (652 samples, 0.69%)</title><rect x="34.2298%" y="213" width="0.6874%" height="15" fill="rgb(206,192,2)" fg:x="32468" fg:w="652"/><text x="34.4798%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (289 samples, 0.30%)</title><rect x="34.6125%" y="197" width="0.3047%" height="15" fill="rgb(241,108,4)" fg:x="32831" fg:w="289"/><text x="34.8625%" y="207.50"></text></g><g><title>fast_float::number::parse_number (12,725 samples, 13.42%)</title><rect x="21.5428%" y="261" width="13.4155%" height="15" fill="rgb(247,173,49)" fg:x="20434" fg:w="12725"/><text x="21.7928%" y="271.50">fast_float::number::..</text></g><g><title>fast_float::number::try_parse_digits (4,379 samples, 4.62%)</title><rect x="30.3417%" y="245" width="4.6166%" height="15" fill="rgb(224,114,35)" fg:x="28780" fg:w="4379"/><text x="30.5917%" y="255.50">fast_..</text></g><g><title>rust_1brc::process_chunk (39 samples, 0.04%)</title><rect x="34.9172%" y="229" width="0.0411%" height="15" fill="rgb(245,159,27)" fg:x="33120" fg:w="39"/><text x="35.1672%" y="239.50"></text></g><g><title>fast_float::parse (16,484 samples, 17.38%)</title><rect x="17.9720%" y="325" width="17.3785%" height="15" fill="rgb(245,172,44)" fg:x="17047" fg:w="16484"/><text x="18.2220%" y="335.50">fast_float::parse</text></g><g><title>fast_float::FastFloat::parse_float (16,484 samples, 17.38%)</title><rect x="17.9720%" y="309" width="17.3785%" height="15" fill="rgb(236,23,11)" fg:x="17047" fg:w="16484"/><text x="18.2220%" y="319.50">fast_float::FastFloat::pars..</text></g><g><title>fast_float::FastFloat::parse_float_partial (16,484 samples, 17.38%)</title><rect x="17.9720%" y="293" width="17.3785%" height="15" fill="rgb(205,117,38)" fg:x="17047" fg:w="16484"/><text x="18.2220%" y="303.50">fast_float::FastFloat::pars..</text></g><g><title>fast_float::parse::parse_float (16,484 samples, 17.38%)</title><rect x="17.9720%" y="277" width="17.3785%" height="15" fill="rgb(237,72,25)" fg:x="17047" fg:w="16484"/><text x="18.2220%" y="287.50">fast_float::parse::parse_fl..</text></g><g><title>rust_1brc::process_chunk (372 samples, 0.39%)</title><rect x="34.9583%" y="261" width="0.3922%" height="15" fill="rgb(244,70,9)" fg:x="33159" fg:w="372"/><text x="35.2083%" y="271.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (23 samples, 0.02%)</title><rect x="35.3790%" y="293" width="0.0242%" height="15" fill="rgb(217,125,39)" fg:x="33558" fg:w="23"/><text x="35.6290%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (23 samples, 0.02%)</title><rect x="35.3790%" y="277" width="0.0242%" height="15" fill="rgb(235,36,10)" fg:x="33558" fg:w="23"/><text x="35.6290%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (186 samples, 0.20%)</title><rect x="35.4032%" y="293" width="0.1961%" height="15" fill="rgb(251,123,47)" fg:x="33581" fg:w="186"/><text x="35.6532%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (112 samples, 0.12%)</title><rect x="36.1075%" y="245" width="0.1181%" height="15" fill="rgb(221,13,13)" fg:x="34249" fg:w="112"/><text x="36.3575%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (112 samples, 0.12%)</title><rect x="36.1075%" y="229" width="0.1181%" height="15" fill="rgb(238,131,9)" fg:x="34249" fg:w="112"/><text x="36.3575%" y="239.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (61 samples, 0.06%)</title><rect x="39.3714%" y="213" width="0.0643%" height="15" fill="rgb(211,50,8)" fg:x="37345" fg:w="61"/><text x="39.6214%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (61 samples, 0.06%)</title><rect x="39.3714%" y="197" width="0.0643%" height="15" fill="rgb(245,182,24)" fg:x="37345" fg:w="61"/><text x="39.6214%" y="207.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (19 samples, 0.02%)</title><rect x="39.5749%" y="181" width="0.0200%" height="15" fill="rgb(242,14,37)" fg:x="37538" fg:w="19"/><text x="39.8249%" y="191.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (580 samples, 0.61%)</title><rect x="42.7114%" y="165" width="0.6115%" height="15" fill="rgb(246,228,12)" fg:x="40513" fg:w="580"/><text x="42.9614%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (580 samples, 0.61%)</title><rect x="42.7114%" y="149" width="0.6115%" height="15" fill="rgb(213,55,15)" fg:x="40513" fg:w="580"/><text x="42.9614%" y="159.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (4,757 samples, 5.02%)</title><rect x="39.5950%" y="181" width="5.0151%" height="15" fill="rgb(209,9,3)" fg:x="37557" fg:w="4757"/><text x="39.8450%" y="191.50">memchr..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (1,221 samples, 1.29%)</title><rect x="43.3228%" y="165" width="1.2873%" height="15" fill="rgb(230,59,30)" fg:x="41093" fg:w="1221"/><text x="43.5728%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,221 samples, 1.29%)</title><rect x="43.3228%" y="149" width="1.2873%" height="15" fill="rgb(209,121,21)" fg:x="41093" fg:w="1221"/><text x="43.5728%" y="159.50"></text></g><g><title>memchr::vector::Vector::movemask_will_have_non_zero (12 samples, 0.01%)</title><rect x="44.6101%" y="181" width="0.0127%" height="15" fill="rgb(220,109,13)" fg:x="42314" fg:w="12"/><text x="44.8601%" y="191.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (12 samples, 0.01%)</title><rect x="44.6101%" y="165" width="0.0127%" height="15" fill="rgb(232,18,1)" fg:x="42314" fg:w="12"/><text x="44.8601%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.01%)</title><rect x="44.6101%" y="149" width="0.0127%" height="15" fill="rgb(215,41,42)" fg:x="42314" fg:w="12"/><text x="44.8601%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (55 samples, 0.06%)</title><rect x="44.6227%" y="165" width="0.0580%" height="15" fill="rgb(224,123,36)" fg:x="42326" fg:w="55"/><text x="44.8727%" y="175.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (102 samples, 0.11%)</title><rect x="44.6227%" y="181" width="0.1075%" height="15" fill="rgb(240,125,3)" fg:x="42326" fg:w="102"/><text x="44.8727%" y="191.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (47 samples, 0.05%)</title><rect x="44.6807%" y="165" width="0.0496%" height="15" fill="rgb(205,98,50)" fg:x="42381" fg:w="47"/><text x="44.9307%" y="175.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (8,917 samples, 9.40%)</title><rect x="35.3505%" y="309" width="9.4009%" height="15" fill="rgb(205,185,37)" fg:x="33531" fg:w="8917"/><text x="35.6005%" y="319.50">memchr::arch:..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (8,675 samples, 9.15%)</title><rect x="35.6056%" y="293" width="9.1457%" height="15" fill="rgb(238,207,15)" fg:x="33773" fg:w="8675"/><text x="35.8556%" y="303.50">memchr::memch..</text></g><g><title>memchr::memchr::memchr_raw (8,675 samples, 9.15%)</title><rect x="35.6056%" y="277" width="9.1457%" height="15" fill="rgb(213,199,42)" fg:x="33773" fg:w="8675"/><text x="35.8556%" y="287.50">memchr::memch..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (8,675 samples, 9.15%)</title><rect x="35.6056%" y="261" width="9.1457%" height="15" fill="rgb(235,201,11)" fg:x="33773" fg:w="8675"/><text x="35.8556%" y="271.50">memchr::arch:..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (8,085 samples, 8.52%)</title><rect x="36.2276%" y="245" width="8.5237%" height="15" fill="rgb(207,46,11)" fg:x="34363" fg:w="8085"/><text x="36.4776%" y="255.50">memchr::arch..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (5,490 samples, 5.79%)</title><rect x="38.9634%" y="229" width="5.7879%" height="15" fill="rgb(241,35,35)" fg:x="36958" fg:w="5490"/><text x="39.2134%" y="239.50">memchr:..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (5,036 samples, 5.31%)</title><rect x="39.4421%" y="213" width="5.3093%" height="15" fill="rgb(243,32,47)" fg:x="37412" fg:w="5036"/><text x="39.6921%" y="223.50">memchr..</text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (5,036 samples, 5.31%)</title><rect x="39.4421%" y="197" width="5.3093%" height="15" fill="rgb(247,202,23)" fg:x="37412" fg:w="5036"/><text x="39.6921%" y="207.50">memchr..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::or (20 samples, 0.02%)</title><rect x="44.7303%" y="181" width="0.0211%" height="15" fill="rgb(219,102,11)" fg:x="42428" fg:w="20"/><text x="44.9803%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_or_si128 (20 samples, 0.02%)</title><rect x="44.7303%" y="165" width="0.0211%" height="15" fill="rgb(243,110,44)" fg:x="42428" fg:w="20"/><text x="44.9803%" y="175.50"></text></g><g><title>memchr::memchr::memchr (8,920 samples, 9.40%)</title><rect x="35.3505%" y="325" width="9.4040%" height="15" fill="rgb(222,74,54)" fg:x="33531" fg:w="8920"/><text x="35.6005%" y="335.50">memchr::memch..</text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,184 samples, 1.25%)</title><rect x="44.7545%" y="325" width="1.2482%" height="15" fill="rgb(216,99,12)" fg:x="42451" fg:w="1184"/><text x="45.0045%" y="335.50"></text></g><g><title>rust_1brc::process_chunk::_{{closure}} (1,184 samples, 1.25%)</title><rect x="44.7545%" y="309" width="1.2482%" height="15" fill="rgb(226,22,26)" fg:x="42451" fg:w="1184"/><text x="45.0045%" y="319.50"></text></g><g><title>__rdl_dealloc (461 samples, 0.49%)</title><rect x="46.0228%" y="181" width="0.4860%" height="15" fill="rgb(217,163,10)" fg:x="43654" fg:w="461"/><text x="46.2728%" y="191.50"></text></g><g><title>__rust_dealloc (1,032 samples, 1.09%)</title><rect x="46.5088%" y="181" width="1.0880%" height="15" fill="rgb(213,25,53)" fg:x="44115" fg:w="1032"/><text x="46.7588%" y="191.50"></text></g><g><title>[libc.so.6] (5,061 samples, 5.34%)</title><rect x="50.6731%" y="165" width="5.3356%" height="15" fill="rgb(252,105,26)" fg:x="48065" fg:w="5061"/><text x="50.9231%" y="175.50">[libc.s..</text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (9,493 samples, 10.01%)</title><rect x="46.0028%" y="309" width="10.0081%" height="15" fill="rgb(220,39,43)" fg:x="43635" fg:w="9493"/><text x="46.2528%" y="319.50">std::collectio..</text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (9,493 samples, 10.01%)</title><rect x="46.0028%" y="293" width="10.0081%" height="15" fill="rgb(229,68,48)" fg:x="43635" fg:w="9493"/><text x="46.2528%" y="303.50">hashbrown::rus..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::boxed::Box&lt;[u8]&gt;,rust_1brc::StationValues&gt;&gt; (9,493 samples, 10.01%)</title><rect x="46.0028%" y="277" width="10.0081%" height="15" fill="rgb(252,8,32)" fg:x="43635" fg:w="9493"/><text x="46.2528%" y="287.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt; (9,493 samples, 10.01%)</title><rect x="46.0028%" y="261" width="10.0081%" height="15" fill="rgb(223,20,43)" fg:x="43635" fg:w="9493"/><text x="46.2528%" y="271.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (9,474 samples, 9.99%)</title><rect x="46.0228%" y="245" width="9.9881%" height="15" fill="rgb(229,81,49)" fg:x="43654" fg:w="9474"/><text x="46.2728%" y="255.50">core::ptr::dro..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,474 samples, 9.99%)</title><rect x="46.0228%" y="229" width="9.9881%" height="15" fill="rgb(236,28,36)" fg:x="43654" fg:w="9474"/><text x="46.2728%" y="239.50">&lt;alloc::boxed:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9,474 samples, 9.99%)</title><rect x="46.0228%" y="213" width="9.9881%" height="15" fill="rgb(249,185,26)" fg:x="43654" fg:w="9474"/><text x="46.2728%" y="223.50">&lt;alloc::alloc:..</text></g><g><title>alloc::alloc::dealloc (9,474 samples, 9.99%)</title><rect x="46.0228%" y="197" width="9.9881%" height="15" fill="rgb(249,174,33)" fg:x="43654" fg:w="9474"/><text x="46.2728%" y="207.50">alloc::alloc::..</text></g><g><title>cfree (7,981 samples, 8.41%)</title><rect x="47.5968%" y="181" width="8.4141%" height="15" fill="rgb(233,201,37)" fg:x="45147" fg:w="7981"/><text x="47.8468%" y="191.50">cfree</text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (9,497 samples, 10.01%)</title><rect x="46.0028%" y="325" width="10.0123%" height="15" fill="rgb(221,78,26)" fg:x="43635" fg:w="9497"/><text x="46.2528%" y="335.50">std::collectio..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (12 samples, 0.01%)</title><rect x="60.6665%" y="293" width="0.0127%" height="15" fill="rgb(250,127,30)" fg:x="57544" fg:w="12"/><text x="60.9165%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (12 samples, 0.01%)</title><rect x="60.6665%" y="277" width="0.0127%" height="15" fill="rgb(230,49,44)" fg:x="57544" fg:w="12"/><text x="60.9165%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.01%)</title><rect x="60.6676%" y="261" width="0.0116%" height="15" fill="rgb(229,67,23)" fg:x="57545" fg:w="11"/><text x="60.9176%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (10 samples, 0.01%)</title><rect x="60.6686%" y="245" width="0.0105%" height="15" fill="rgb(249,83,47)" fg:x="57546" fg:w="10"/><text x="60.9186%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (10 samples, 0.01%)</title><rect x="60.6686%" y="229" width="0.0105%" height="15" fill="rgb(215,43,3)" fg:x="57546" fg:w="10"/><text x="60.9186%" y="239.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (67 samples, 0.07%)</title><rect x="60.6792%" y="213" width="0.0706%" height="15" fill="rgb(238,154,13)" fg:x="57556" fg:w="67"/><text x="60.9292%" y="223.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (67 samples, 0.07%)</title><rect x="60.6792%" y="197" width="0.0706%" height="15" fill="rgb(219,56,2)" fg:x="57556" fg:w="67"/><text x="60.9292%" y="207.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (67 samples, 0.07%)</title><rect x="60.6792%" y="181" width="0.0706%" height="15" fill="rgb(233,0,4)" fg:x="57556" fg:w="67"/><text x="60.9292%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (67 samples, 0.07%)</title><rect x="60.6792%" y="165" width="0.0706%" height="15" fill="rgb(235,30,7)" fg:x="57556" fg:w="67"/><text x="60.9292%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (505 samples, 0.53%)</title><rect x="63.2916%" y="181" width="0.5324%" height="15" fill="rgb(250,79,13)" fg:x="60034" fg:w="505"/><text x="63.5416%" y="191.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (505 samples, 0.53%)</title><rect x="63.2916%" y="165" width="0.5324%" height="15" fill="rgb(211,146,34)" fg:x="60034" fg:w="505"/><text x="63.5416%" y="175.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (505 samples, 0.53%)</title><rect x="63.2916%" y="149" width="0.5324%" height="15" fill="rgb(228,22,38)" fg:x="60034" fg:w="505"/><text x="63.5416%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (505 samples, 0.53%)</title><rect x="63.2916%" y="133" width="0.5324%" height="15" fill="rgb(235,168,5)" fg:x="60034" fg:w="505"/><text x="63.5416%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (11 samples, 0.01%)</title><rect x="63.8124%" y="117" width="0.0116%" height="15" fill="rgb(221,155,16)" fg:x="60528" fg:w="11"/><text x="64.0624%" y="127.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (340 samples, 0.36%)</title><rect x="63.8240%" y="165" width="0.3584%" height="15" fill="rgb(215,215,53)" fg:x="60539" fg:w="340"/><text x="64.0740%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (2,332 samples, 2.46%)</title><rect x="64.1825%" y="165" width="2.4585%" height="15" fill="rgb(223,4,10)" fg:x="60879" fg:w="2332"/><text x="64.4325%" y="175.50">co..</text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (8,172 samples, 8.62%)</title><rect x="60.7498%" y="197" width="8.6154%" height="15" fill="rgb(234,103,6)" fg:x="57623" fg:w="8172"/><text x="60.9998%" y="207.50">&lt;rustc_hash:..</text></g><g><title>rustc_hash::FxHasher::add_to_hash (5,256 samples, 5.54%)</title><rect x="63.8240%" y="181" width="5.5412%" height="15" fill="rgb(227,97,0)" fg:x="60539" fg:w="5256"/><text x="64.0740%" y="191.50">rustc_h..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (2,584 samples, 2.72%)</title><rect x="66.6410%" y="165" width="2.7242%" height="15" fill="rgb(234,150,53)" fg:x="63211" fg:w="2584"/><text x="66.8910%" y="175.50">co..</text></g><g><title>hashbrown::map::make_hash (8,263 samples, 8.71%)</title><rect x="60.6792%" y="293" width="8.7114%" height="15" fill="rgb(228,201,54)" fg:x="57556" fg:w="8263"/><text x="60.9292%" y="303.50">hashbrown::m..</text></g><g><title>core::hash::BuildHasher::hash_one (8,263 samples, 8.71%)</title><rect x="60.6792%" y="277" width="8.7114%" height="15" fill="rgb(222,22,37)" fg:x="57556" fg:w="8263"/><text x="60.9292%" y="287.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8,263 samples, 8.71%)</title><rect x="60.6792%" y="261" width="8.7114%" height="15" fill="rgb(237,53,32)" fg:x="57556" fg:w="8263"/><text x="60.9292%" y="271.50">core::hash::..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (8,263 samples, 8.71%)</title><rect x="60.6792%" y="245" width="8.7114%" height="15" fill="rgb(233,25,53)" fg:x="57556" fg:w="8263"/><text x="60.9292%" y="255.50">&lt;alloc::boxe..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (8,263 samples, 8.71%)</title><rect x="60.6792%" y="229" width="8.7114%" height="15" fill="rgb(210,40,34)" fg:x="57556" fg:w="8263"/><text x="60.9292%" y="239.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (8,196 samples, 8.64%)</title><rect x="60.7498%" y="213" width="8.6407%" height="15" fill="rgb(241,220,44)" fg:x="57623" fg:w="8196"/><text x="60.9998%" y="223.50">core::hash::..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (24 samples, 0.03%)</title><rect x="69.3652%" y="197" width="0.0253%" height="15" fill="rgb(235,28,35)" fg:x="65795" fg:w="24"/><text x="69.6152%" y="207.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (60 samples, 0.06%)</title><rect x="72.7484%" y="229" width="0.0633%" height="15" fill="rgb(210,56,17)" fg:x="69004" fg:w="60"/><text x="72.9984%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.07%)</title><rect x="72.7441%" y="261" width="0.0727%" height="15" fill="rgb(224,130,29)" fg:x="69000" fg:w="69"/><text x="72.9941%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (69 samples, 0.07%)</title><rect x="72.7441%" y="245" width="0.0727%" height="15" fill="rgb(235,212,8)" fg:x="69000" fg:w="69"/><text x="72.9941%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (877 samples, 0.92%)</title><rect x="72.8200%" y="245" width="0.9246%" height="15" fill="rgb(223,33,50)" fg:x="69072" fg:w="877"/><text x="73.0700%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (877 samples, 0.92%)</title><rect x="72.8200%" y="229" width="0.9246%" height="15" fill="rgb(219,149,13)" fg:x="69072" fg:w="877"/><text x="73.0700%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (877 samples, 0.92%)</title><rect x="72.8200%" y="213" width="0.9246%" height="15" fill="rgb(250,156,29)" fg:x="69072" fg:w="877"/><text x="73.0700%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (877 samples, 0.92%)</title><rect x="72.8200%" y="197" width="0.9246%" height="15" fill="rgb(216,193,19)" fg:x="69072" fg:w="877"/><text x="73.0700%" y="207.50"></text></g><g><title>[libc.so.6] (8,491 samples, 8.95%)</title><rect x="79.0286%" y="181" width="8.9517%" height="15" fill="rgb(216,135,14)" fg:x="74961" fg:w="8491"/><text x="79.2786%" y="191.50">[libc.so.6]</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13,510 samples, 14.24%)</title><rect x="73.7446%" y="197" width="14.2431%" height="15" fill="rgb(241,47,5)" fg:x="69949" fg:w="13510"/><text x="73.9946%" y="207.50">&lt;[A] as core::slice::c..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (14,398 samples, 15.18%)</title><rect x="72.8169%" y="261" width="15.1793%" height="15" fill="rgb(233,42,35)" fg:x="69069" fg:w="14398"/><text x="73.0669%" y="271.50">hashbrown::raw::RawTabl..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (13,518 samples, 14.25%)</title><rect x="73.7446%" y="245" width="14.2515%" height="15" fill="rgb(231,13,6)" fg:x="69949" fg:w="13518"/><text x="73.9946%" y="255.50">hashbrown::rustc_entry..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (13,518 samples, 14.25%)</title><rect x="73.7446%" y="229" width="14.2515%" height="15" fill="rgb(207,181,40)" fg:x="69949" fg:w="13518"/><text x="73.9946%" y="239.50">&lt;alloc::boxed::Box&lt;T,A..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13,518 samples, 14.25%)</title><rect x="73.7446%" y="213" width="14.2515%" height="15" fill="rgb(254,173,49)" fg:x="69949" fg:w="13518"/><text x="73.9946%" y="223.50">core::slice::cmp::&lt;imp..</text></g><g><title>hashbrown::raw::h2 (2,871 samples, 3.03%)</title><rect x="87.9962%" y="261" width="3.0268%" height="15" fill="rgb(221,1,38)" fg:x="83467" fg:w="2871"/><text x="88.2462%" y="271.50">has..</text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.02%)</title><rect x="91.0230%" y="229" width="0.0211%" height="15" fill="rgb(206,124,46)" fg:x="86338" fg:w="20"/><text x="91.2730%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (482 samples, 0.51%)</title><rect x="91.0230%" y="261" width="0.5082%" height="15" fill="rgb(249,21,11)" fg:x="86338" fg:w="482"/><text x="91.2730%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (482 samples, 0.51%)</title><rect x="91.0230%" y="245" width="0.5082%" height="15" fill="rgb(222,201,40)" fg:x="86338" fg:w="482"/><text x="91.2730%" y="255.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (462 samples, 0.49%)</title><rect x="91.0440%" y="229" width="0.4871%" height="15" fill="rgb(235,61,29)" fg:x="86358" fg:w="462"/><text x="91.2940%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4,412 samples, 4.65%)</title><rect x="91.5311%" y="261" width="4.6514%" height="15" fill="rgb(219,207,3)" fg:x="86820" fg:w="4412"/><text x="91.7811%" y="271.50">hashb..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,412 samples, 4.65%)</title><rect x="91.5311%" y="245" width="4.6514%" height="15" fill="rgb(222,56,46)" fg:x="86820" fg:w="4412"/><text x="91.7811%" y="255.50">core:..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (416 samples, 0.44%)</title><rect x="96.1825%" y="261" width="0.4386%" height="15" fill="rgb(239,76,54)" fg:x="91232" fg:w="416"/><text x="96.4325%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (416 samples, 0.44%)</title><rect x="96.1825%" y="245" width="0.4386%" height="15" fill="rgb(231,124,27)" fg:x="91232" fg:w="416"/><text x="96.4325%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (416 samples, 0.44%)</title><rect x="96.1825%" y="229" width="0.4386%" height="15" fill="rgb(249,195,6)" fg:x="91232" fg:w="416"/><text x="96.4325%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (25,613 samples, 27.00%)</title><rect x="69.6689%" y="277" width="27.0028%" height="15" fill="rgb(237,174,47)" fg:x="66083" fg:w="25613"/><text x="69.9189%" y="287.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (48 samples, 0.05%)</title><rect x="96.6211%" y="261" width="0.0506%" height="15" fill="rgb(206,201,31)" fg:x="91648" fg:w="48"/><text x="96.8711%" y="271.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (38,377 samples, 40.46%)</title><rect x="56.2144%" y="309" width="40.4594%" height="15" fill="rgb(231,57,52)" fg:x="53321" fg:w="38377"/><text x="56.4644%" y="319.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (25,879 samples, 27.28%)</title><rect x="69.3905%" y="293" width="27.2833%" height="15" fill="rgb(248,177,22)" fg:x="65819" fg:w="25879"/><text x="69.6405%" y="303.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>rust_1brc::process_chunk (66 samples, 0.07%)</title><rect x="96.6738%" y="309" width="0.0696%" height="15" fill="rgb(215,211,37)" fg:x="91698" fg:w="66"/><text x="96.9238%" y="319.50"></text></g><g><title>std::panic::catch_unwind (91,854 samples, 96.84%)</title><rect x="0.0622%" y="453" width="96.8383%" height="15" fill="rgb(241,128,51)" fg:x="59" fg:w="91854"/><text x="0.3122%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (91,854 samples, 96.84%)</title><rect x="0.0622%" y="437" width="96.8383%" height="15" fill="rgb(227,165,31)" fg:x="59" fg:w="91854"/><text x="0.3122%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (91,854 samples, 96.84%)</title><rect x="0.0622%" y="421" width="96.8383%" height="15" fill="rgb(228,167,24)" fg:x="59" fg:w="91854"/><text x="0.3122%" y="431.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (91,854 samples, 96.84%)</title><rect x="0.0622%" y="405" width="96.8383%" height="15" fill="rgb(228,143,12)" fg:x="59" fg:w="91854"/><text x="0.3122%" y="415.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (91,854 samples, 96.84%)</title><rect x="0.0622%" y="389" width="96.8383%" height="15" fill="rgb(249,149,8)" fg:x="59" fg:w="91854"/><text x="0.3122%" y="399.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (91,854 samples, 96.84%)</title><rect x="0.0622%" y="373" width="96.8383%" height="15" fill="rgb(243,35,44)" fg:x="59" fg:w="91854"/><text x="0.3122%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_1brc::calculate_station_values::_{{closure}} (91,854 samples, 96.84%)</title><rect x="0.0622%" y="357" width="96.8383%" height="15" fill="rgb(246,89,9)" fg:x="59" fg:w="91854"/><text x="0.3122%" y="367.50">rust_1brc::calculate_station_values::_{{closure}}</text></g><g><title>rust_1brc::process_chunk (90,753 samples, 95.68%)</title><rect x="1.2229%" y="341" width="95.6775%" height="15" fill="rgb(233,213,13)" fg:x="1160" fg:w="90753"/><text x="1.4729%" y="351.50">rust_1brc::process_chunk</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (38,781 samples, 40.89%)</title><rect x="56.0151%" y="325" width="40.8854%" height="15" fill="rgb(233,141,41)" fg:x="53132" fg:w="38781"/><text x="56.2651%" y="335.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (149 samples, 0.16%)</title><rect x="96.7434%" y="309" width="0.1571%" height="15" fill="rgb(239,167,4)" fg:x="91764" fg:w="149"/><text x="96.9934%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (91,865 samples, 96.85%)</title><rect x="0.0622%" y="485" width="96.8499%" height="15" fill="rgb(209,217,16)" fg:x="59" fg:w="91865"/><text x="0.3122%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (91,865 samples, 96.85%)</title><rect x="0.0622%" y="469" width="96.8499%" height="15" fill="rgb(219,88,35)" fg:x="59" fg:w="91865"/><text x="0.3122%" y="479.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>[libc.so.6] (91,929 samples, 96.92%)</title><rect x="0.0221%" y="517" width="96.9173%" height="15" fill="rgb(220,193,23)" fg:x="21" fg:w="91929"/><text x="0.2721%" y="527.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (91,891 samples, 96.88%)</title><rect x="0.0622%" y="501" width="96.8773%" height="15" fill="rgb(230,90,52)" fg:x="59" fg:w="91891"/><text x="0.3122%" y="511.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (26 samples, 0.03%)</title><rect x="96.9121%" y="485" width="0.0274%" height="15" fill="rgb(252,106,19)" fg:x="91924" fg:w="26"/><text x="97.1621%" y="495.50"></text></g><g><title>sigaltstack (16 samples, 0.02%)</title><rect x="96.9226%" y="469" width="0.0169%" height="15" fill="rgb(206,74,20)" fg:x="91934" fg:w="16"/><text x="97.1726%" y="479.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="96.9237%" y="453" width="0.0158%" height="15" fill="rgb(230,138,44)" fg:x="91935" fg:w="15"/><text x="97.1737%" y="463.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="96.9258%" y="437" width="0.0137%" height="15" fill="rgb(235,182,43)" fg:x="91937" fg:w="13"/><text x="97.1758%" y="447.50"></text></g><g><title>[unknown] (11 samples, 0.01%)</title><rect x="96.9279%" y="421" width="0.0116%" height="15" fill="rgb(242,16,51)" fg:x="91939" fg:w="11"/><text x="97.1779%" y="431.50"></text></g><g><title>[libc.so.6] (91,930 samples, 96.92%)</title><rect x="0.0221%" y="533" width="96.9184%" height="15" fill="rgb(248,9,4)" fg:x="21" fg:w="91930"/><text x="0.2721%" y="543.50">[libc.so.6]</text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="96.9405%" y="533" width="0.0242%" height="15" fill="rgb(210,31,22)" fg:x="91951" fg:w="23"/><text x="97.1905%" y="543.50"></text></g><g><title>[libc.so.6] (18 samples, 0.02%)</title><rect x="97.0354%" y="213" width="0.0190%" height="15" fill="rgb(239,54,39)" fg:x="92041" fg:w="18"/><text x="97.2854%" y="223.50"></text></g><g><title>[libc.so.6] (76 samples, 0.08%)</title><rect x="96.9827%" y="229" width="0.0801%" height="15" fill="rgb(230,99,41)" fg:x="91991" fg:w="76"/><text x="97.2327%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (99 samples, 0.10%)</title><rect x="96.9669%" y="341" width="0.1044%" height="15" fill="rgb(253,106,12)" fg:x="91976" fg:w="99"/><text x="97.2169%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (99 samples, 0.10%)</title><rect x="96.9669%" y="325" width="0.1044%" height="15" fill="rgb(213,46,41)" fg:x="91976" fg:w="99"/><text x="97.2169%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (99 samples, 0.10%)</title><rect x="96.9669%" y="309" width="0.1044%" height="15" fill="rgb(215,133,35)" fg:x="91976" fg:w="99"/><text x="97.2169%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (99 samples, 0.10%)</title><rect x="96.9669%" y="293" width="0.1044%" height="15" fill="rgb(213,28,5)" fg:x="91976" fg:w="99"/><text x="97.2169%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (99 samples, 0.10%)</title><rect x="96.9669%" y="277" width="0.1044%" height="15" fill="rgb(215,77,49)" fg:x="91976" fg:w="99"/><text x="97.2169%" y="287.50"></text></g><g><title>alloc::alloc::alloc (99 samples, 0.10%)</title><rect x="96.9669%" y="261" width="0.1044%" height="15" fill="rgb(248,100,22)" fg:x="91976" fg:w="99"/><text x="97.2169%" y="271.50"></text></g><g><title>malloc (94 samples, 0.10%)</title><rect x="96.9722%" y="245" width="0.0991%" height="15" fill="rgb(208,67,9)" fg:x="91981" fg:w="94"/><text x="97.2222%" y="255.50"></text></g><g><title>[libc.so.6] (2,523 samples, 2.66%)</title><rect x="97.0713%" y="325" width="2.6599%" height="15" fill="rgb(219,133,21)" fg:x="92075" fg:w="2523"/><text x="97.3213%" y="335.50">[l..</text></g><g><title>[unknown] (279 samples, 0.29%)</title><rect x="99.4370%" y="309" width="0.2941%" height="15" fill="rgb(246,46,29)" fg:x="94319" fg:w="279"/><text x="99.6870%" y="319.50"></text></g><g><title>[unknown] (120 samples, 0.13%)</title><rect x="99.6047%" y="293" width="0.1265%" height="15" fill="rgb(246,185,52)" fg:x="94478" fg:w="120"/><text x="99.8547%" y="303.50"></text></g><g><title>[unknown] (108 samples, 0.11%)</title><rect x="99.6173%" y="277" width="0.1139%" height="15" fill="rgb(252,136,11)" fg:x="94490" fg:w="108"/><text x="99.8673%" y="287.50"></text></g><g><title>[unknown] (80 samples, 0.08%)</title><rect x="99.6468%" y="261" width="0.0843%" height="15" fill="rgb(219,138,53)" fg:x="94518" fg:w="80"/><text x="99.8968%" y="271.50"></text></g><g><title>[unknown] (33 samples, 0.03%)</title><rect x="99.6964%" y="245" width="0.0348%" height="15" fill="rgb(211,51,23)" fg:x="94565" fg:w="33"/><text x="99.9464%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (2,631 samples, 2.77%)</title><rect x="96.9669%" y="373" width="2.7738%" height="15" fill="rgb(247,221,28)" fg:x="91976" fg:w="2631"/><text x="97.2169%" y="383.50">&lt;a..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as alloc::boxed::BoxFromSlice&lt;T&gt;&gt;::from_slice (2,631 samples, 2.77%)</title><rect x="96.9669%" y="357" width="2.7738%" height="15" fill="rgb(251,222,45)" fg:x="91976" fg:w="2631"/><text x="97.2169%" y="367.50">&lt;a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,532 samples, 2.67%)</title><rect x="97.0713%" y="341" width="2.6694%" height="15" fill="rgb(217,162,53)" fg:x="92075" fg:w="2532"/><text x="97.3213%" y="351.50">co..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (102 samples, 0.11%)</title><rect x="99.7407%" y="373" width="0.1075%" height="15" fill="rgb(229,93,14)" fg:x="94607" fg:w="102"/><text x="99.9907%" y="383.50"></text></g><g><title>read (97 samples, 0.10%)</title><rect x="99.7459%" y="357" width="0.1023%" height="15" fill="rgb(209,67,49)" fg:x="94612" fg:w="97"/><text x="99.9959%" y="367.50"></text></g><g><title>[unknown] (94 samples, 0.10%)</title><rect x="99.7491%" y="341" width="0.0991%" height="15" fill="rgb(213,87,29)" fg:x="94615" fg:w="94"/><text x="99.9991%" y="351.50"></text></g><g><title>[unknown] (87 samples, 0.09%)</title><rect x="99.7565%" y="325" width="0.0917%" height="15" fill="rgb(205,151,52)" fg:x="94622" fg:w="87"/><text x="100.0065%" y="335.50"></text></g><g><title>[unknown] (83 samples, 0.09%)</title><rect x="99.7607%" y="309" width="0.0875%" height="15" fill="rgb(253,215,39)" fg:x="94626" fg:w="83"/><text x="100.0107%" y="319.50"></text></g><g><title>[unknown] (83 samples, 0.09%)</title><rect x="99.7607%" y="293" width="0.0875%" height="15" fill="rgb(221,220,41)" fg:x="94626" fg:w="83"/><text x="100.0107%" y="303.50"></text></g><g><title>[unknown] (77 samples, 0.08%)</title><rect x="99.7670%" y="277" width="0.0812%" height="15" fill="rgb(218,133,21)" fg:x="94632" fg:w="77"/><text x="100.0170%" y="287.50"></text></g><g><title>[unknown] (46 samples, 0.05%)</title><rect x="99.7997%" y="261" width="0.0485%" height="15" fill="rgb(221,193,43)" fg:x="94663" fg:w="46"/><text x="100.0497%" y="271.50"></text></g><g><title>[unknown] (38 samples, 0.04%)</title><rect x="99.8081%" y="245" width="0.0401%" height="15" fill="rgb(240,128,52)" fg:x="94671" fg:w="38"/><text x="100.0581%" y="255.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="99.8313%" y="229" width="0.0169%" height="15" fill="rgb(253,114,12)" fg:x="94693" fg:w="16"/><text x="100.0813%" y="239.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_send (20 samples, 0.02%)</title><rect x="99.8682%" y="341" width="0.0211%" height="15" fill="rgb(215,223,47)" fg:x="94728" fg:w="20"/><text x="100.1182%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (91 samples, 0.10%)</title><rect x="99.8925%" y="293" width="0.0959%" height="15" fill="rgb(248,225,23)" fg:x="94751" fg:w="91"/><text x="100.1425%" y="303.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select::_{{closure}} (91 samples, 0.10%)</title><rect x="99.8925%" y="277" width="0.0959%" height="15" fill="rgb(250,108,0)" fg:x="94751" fg:w="91"/><text x="100.1425%" y="287.50"></text></g><g><title>crossbeam_channel::context::Context::unpark (83 samples, 0.09%)</title><rect x="99.9009%" y="261" width="0.0875%" height="15" fill="rgb(228,208,7)" fg:x="94759" fg:w="83"/><text x="100.1509%" y="271.50"></text></g><g><title>std::thread::Thread::unpark (83 samples, 0.09%)</title><rect x="99.9009%" y="245" width="0.0875%" height="15" fill="rgb(244,45,10)" fg:x="94759" fg:w="83"/><text x="100.1509%" y="255.50"></text></g><g><title>std::sys_common::thread_parking::futex::Parker::unpark (82 samples, 0.09%)</title><rect x="99.9020%" y="229" width="0.0864%" height="15" fill="rgb(207,125,25)" fg:x="94760" fg:w="82"/><text x="100.1520%" y="239.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (80 samples, 0.08%)</title><rect x="99.9041%" y="213" width="0.0843%" height="15" fill="rgb(210,195,18)" fg:x="94762" fg:w="80"/><text x="100.1541%" y="223.50"></text></g><g><title>syscall (80 samples, 0.08%)</title><rect x="99.9041%" y="197" width="0.0843%" height="15" fill="rgb(249,80,12)" fg:x="94762" fg:w="80"/><text x="100.1541%" y="207.50"></text></g><g><title>[unknown] (79 samples, 0.08%)</title><rect x="99.9051%" y="181" width="0.0833%" height="15" fill="rgb(221,65,9)" fg:x="94763" fg:w="79"/><text x="100.1551%" y="191.50"></text></g><g><title>[unknown] (73 samples, 0.08%)</title><rect x="99.9114%" y="165" width="0.0770%" height="15" fill="rgb(235,49,36)" fg:x="94769" fg:w="73"/><text x="100.1614%" y="175.50"></text></g><g><title>[unknown] (58 samples, 0.06%)</title><rect x="99.9273%" y="149" width="0.0611%" height="15" fill="rgb(225,32,20)" fg:x="94784" fg:w="58"/><text x="100.1773%" y="159.50"></text></g><g><title>[unknown] (54 samples, 0.06%)</title><rect x="99.9315%" y="133" width="0.0569%" height="15" fill="rgb(215,141,46)" fg:x="94788" fg:w="54"/><text x="100.1815%" y="143.50"></text></g><g><title>[unknown] (48 samples, 0.05%)</title><rect x="99.9378%" y="117" width="0.0506%" height="15" fill="rgb(250,160,47)" fg:x="94794" fg:w="48"/><text x="100.1878%" y="127.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select (93 samples, 0.10%)</title><rect x="99.8914%" y="309" width="0.0980%" height="15" fill="rgb(216,222,40)" fg:x="94750" fg:w="93"/><text x="100.1414%" y="319.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::write (96 samples, 0.10%)</title><rect x="99.8893%" y="341" width="0.1012%" height="15" fill="rgb(234,217,39)" fg:x="94748" fg:w="96"/><text x="100.1393%" y="351.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (96 samples, 0.10%)</title><rect x="99.8893%" y="325" width="0.1012%" height="15" fill="rgb(207,178,40)" fg:x="94748" fg:w="96"/><text x="100.1393%" y="335.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (130 samples, 0.14%)</title><rect x="99.8577%" y="373" width="0.1371%" height="15" fill="rgb(221,136,13)" fg:x="94718" fg:w="130"/><text x="100.1077%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (126 samples, 0.13%)</title><rect x="99.8619%" y="357" width="0.1328%" height="15" fill="rgb(249,199,10)" fg:x="94722" fg:w="126"/><text x="100.1119%" y="367.50"></text></g><g><title>rust_1brc::calculate_station_values (2,878 samples, 3.03%)</title><rect x="96.9648%" y="389" width="3.0342%" height="15" fill="rgb(249,222,13)" fg:x="91974" fg:w="2878"/><text x="97.2148%" y="399.50">rus..</text></g><g><title>all (94,853 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="94853"/><text x="0.2500%" y="575.50"></text></g><g><title>rust-1brc (94,853 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="94853"/><text x="0.2500%" y="559.50">rust-1brc</text></g><g><title>_start (2,879 samples, 3.04%)</title><rect x="96.9648%" y="533" width="3.0352%" height="15" fill="rgb(250,229,37)" fg:x="91974" fg:w="2879"/><text x="97.2148%" y="543.50">_st..</text></g><g><title>__libc_start_main (2,879 samples, 3.04%)</title><rect x="96.9648%" y="517" width="3.0352%" height="15" fill="rgb(206,174,23)" fg:x="91974" fg:w="2879"/><text x="97.2148%" y="527.50">__l..</text></g><g><title>[libc.so.6] (2,879 samples, 3.04%)</title><rect x="96.9648%" y="501" width="3.0352%" height="15" fill="rgb(211,33,43)" fg:x="91974" fg:w="2879"/><text x="97.2148%" y="511.50">[li..</text></g><g><title>main (2,879 samples, 3.04%)</title><rect x="96.9648%" y="485" width="3.0352%" height="15" fill="rgb(245,58,50)" fg:x="91974" fg:w="2879"/><text x="97.2148%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (2,879 samples, 3.04%)</title><rect x="96.9648%" y="469" width="3.0352%" height="15" fill="rgb(244,68,36)" fg:x="91974" fg:w="2879"/><text x="97.2148%" y="479.50">std..</text></g><g><title>std::rt::lang_start::_{{closure}} (2,879 samples, 3.04%)</title><rect x="96.9648%" y="453" width="3.0352%" height="15" fill="rgb(232,229,15)" fg:x="91974" fg:w="2879"/><text x="97.2148%" y="463.50">std..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,879 samples, 3.04%)</title><rect x="96.9648%" y="437" width="3.0352%" height="15" fill="rgb(254,30,23)" fg:x="91974" fg:w="2879"/><text x="97.2148%" y="447.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once (2,879 samples, 3.04%)</title><rect x="96.9648%" y="421" width="3.0352%" height="15" fill="rgb(235,160,14)" fg:x="91974" fg:w="2879"/><text x="97.2148%" y="431.50">cor..</text></g><g><title>rust_1brc::main (2,879 samples, 3.04%)</title><rect x="96.9648%" y="405" width="3.0352%" height="15" fill="rgb(212,155,44)" fg:x="91974" fg:w="2879"/><text x="97.2148%" y="415.50">rus..</text></g></svg></svg>