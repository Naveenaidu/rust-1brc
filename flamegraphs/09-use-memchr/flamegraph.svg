<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="29810"><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0235%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.0101%" y="453" width="0.0134%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="4"/><text x="0.2601%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.03%)</title><rect x="0.0000%" y="485" width="0.0268%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="8"/><text x="0.2500%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (200 samples, 0.67%)</title><rect x="0.7045%" y="309" width="0.6709%" height="15" fill="rgb(248,212,6)" fg:x="210" fg:w="200"/><text x="0.9545%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (805 samples, 2.70%)</title><rect x="0.7045%" y="325" width="2.7004%" height="15" fill="rgb(208,68,35)" fg:x="210" fg:w="805"/><text x="0.9545%" y="335.50">co..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (605 samples, 2.03%)</title><rect x="1.3754%" y="309" width="2.0295%" height="15" fill="rgb(232,128,0)" fg:x="410" fg:w="605"/><text x="1.6254%" y="319.50">&lt;..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (263 samples, 0.88%)</title><rect x="2.5226%" y="293" width="0.8823%" height="15" fill="rgb(207,160,47)" fg:x="752" fg:w="263"/><text x="2.7726%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (263 samples, 0.88%)</title><rect x="2.5226%" y="277" width="0.8823%" height="15" fill="rgb(228,23,34)" fg:x="752" fg:w="263"/><text x="2.7726%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (263 samples, 0.88%)</title><rect x="2.5226%" y="261" width="0.8823%" height="15" fill="rgb(218,30,26)" fg:x="752" fg:w="263"/><text x="2.7726%" y="271.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (3,889 samples, 13.05%)</title><rect x="5.9812%" y="245" width="13.0460%" height="15" fill="rgb(220,122,19)" fg:x="1783" fg:w="3889"/><text x="6.2312%" y="255.50">&lt;f32 as core::ops::a..</text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::from_u64 (41 samples, 0.14%)</title><rect x="19.0272%" y="245" width="0.1375%" height="15" fill="rgb(250,228,42)" fg:x="5672" fg:w="41"/><text x="19.2772%" y="255.50"></text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::pow10_fast_path (121 samples, 0.41%)</title><rect x="19.1647%" y="245" width="0.4059%" height="15" fill="rgb(240,193,28)" fg:x="5713" fg:w="121"/><text x="19.4147%" y="255.50"></text></g><g><title>fast_float::number::Number::try_fast_path (4,816 samples, 16.16%)</title><rect x="4.0892%" y="261" width="16.1557%" height="15" fill="rgb(216,20,37)" fg:x="1219" fg:w="4816"/><text x="4.3392%" y="271.50">fast_float::number::Numbe..</text></g><g><title>fast_float::number::Number::is_fast_path (201 samples, 0.67%)</title><rect x="19.5706%" y="245" width="0.6743%" height="15" fill="rgb(206,188,39)" fg:x="5834" fg:w="201"/><text x="19.8206%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (121 samples, 0.41%)</title><rect x="22.2979%" y="245" width="0.4059%" height="15" fill="rgb(217,207,13)" fg:x="6647" fg:w="121"/><text x="22.5479%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (107 samples, 0.36%)</title><rect x="22.3449%" y="229" width="0.3589%" height="15" fill="rgb(231,73,38)" fg:x="6661" fg:w="107"/><text x="22.5949%" y="239.50"></text></g><g><title>fast_float::common::AsciiStr::check_first_either (122 samples, 0.41%)</title><rect x="22.7038%" y="245" width="0.4093%" height="15" fill="rgb(225,20,46)" fg:x="6768" fg:w="122"/><text x="22.9538%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::first (204 samples, 0.68%)</title><rect x="23.1130%" y="245" width="0.6843%" height="15" fill="rgb(210,31,41)" fg:x="6890" fg:w="204"/><text x="23.3630%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::offset_from (58 samples, 0.19%)</title><rect x="23.7974%" y="245" width="0.1946%" height="15" fill="rgb(221,200,47)" fg:x="7094" fg:w="58"/><text x="24.0474%" y="255.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (58 samples, 0.19%)</title><rect x="23.7974%" y="229" width="0.1946%" height="15" fill="rgb(226,26,5)" fg:x="7094" fg:w="58"/><text x="24.0474%" y="239.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (319 samples, 1.07%)</title><rect x="23.9919%" y="245" width="1.0701%" height="15" fill="rgb(249,33,26)" fg:x="7152" fg:w="319"/><text x="24.2419%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (319 samples, 1.07%)</title><rect x="23.9919%" y="229" width="1.0701%" height="15" fill="rgb(235,183,28)" fg:x="7152" fg:w="319"/><text x="24.2419%" y="239.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (252 samples, 0.85%)</title><rect x="24.2167%" y="213" width="0.8454%" height="15" fill="rgb(221,5,38)" fg:x="7219" fg:w="252"/><text x="24.4667%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (163 samples, 0.55%)</title><rect x="24.5153%" y="197" width="0.5468%" height="15" fill="rgb(247,18,42)" fg:x="7308" fg:w="163"/><text x="24.7653%" y="207.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (431 samples, 1.45%)</title><rect x="27.0849%" y="213" width="1.4458%" height="15" fill="rgb(241,131,45)" fg:x="8074" fg:w="431"/><text x="27.3349%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::first (4 samples, 0.01%)</title><rect x="28.5307%" y="213" width="0.0134%" height="15" fill="rgb(249,31,29)" fg:x="8505" fg:w="4"/><text x="28.7807%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (407 samples, 1.37%)</title><rect x="28.5441%" y="213" width="1.3653%" height="15" fill="rgb(225,111,53)" fg:x="8509" fg:w="407"/><text x="28.7941%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::step (57 samples, 0.19%)</title><rect x="29.9094%" y="213" width="0.1912%" height="15" fill="rgb(238,160,17)" fg:x="8916" fg:w="57"/><text x="30.1594%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (57 samples, 0.19%)</title><rect x="29.9094%" y="197" width="0.1912%" height="15" fill="rgb(214,148,48)" fg:x="8916" fg:w="57"/><text x="30.1594%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (57 samples, 0.19%)</title><rect x="29.9094%" y="181" width="0.1912%" height="15" fill="rgb(232,36,49)" fg:x="8916" fg:w="57"/><text x="30.1594%" y="191.50"></text></g><g><title>fast_float::parse (8,159 samples, 27.37%)</title><rect x="3.4049%" y="325" width="27.3700%" height="15" fill="rgb(209,103,24)" fg:x="1015" fg:w="8159"/><text x="3.6549%" y="335.50">fast_float::parse</text></g><g><title>fast_float::FastFloat::parse_float (8,159 samples, 27.37%)</title><rect x="3.4049%" y="309" width="27.3700%" height="15" fill="rgb(229,88,8)" fg:x="1015" fg:w="8159"/><text x="3.6549%" y="319.50">fast_float::FastFloat::parse_float</text></g><g><title>fast_float::FastFloat::parse_float_partial (8,159 samples, 27.37%)</title><rect x="3.4049%" y="293" width="27.3700%" height="15" fill="rgb(213,181,19)" fg:x="1015" fg:w="8159"/><text x="3.6549%" y="303.50">fast_float::FastFloat::parse_float_partial</text></g><g><title>fast_float::parse::parse_float (8,159 samples, 27.37%)</title><rect x="3.4049%" y="277" width="27.3700%" height="15" fill="rgb(254,191,54)" fg:x="1015" fg:w="8159"/><text x="3.6549%" y="287.50">fast_float::parse::parse_float</text></g><g><title>fast_float::number::parse_number (3,139 samples, 10.53%)</title><rect x="20.2449%" y="261" width="10.5300%" height="15" fill="rgb(241,83,37)" fg:x="6035" fg:w="3139"/><text x="20.4949%" y="271.50">fast_float::num..</text></g><g><title>fast_float::number::try_parse_digits (1,703 samples, 5.71%)</title><rect x="25.0621%" y="245" width="5.7128%" height="15" fill="rgb(233,36,39)" fg:x="7471" fg:w="1703"/><text x="25.3121%" y="255.50">fast_fl..</text></g><g><title>fast_float::common::AsciiStr::parse_digits (1,703 samples, 5.71%)</title><rect x="25.0621%" y="229" width="5.7128%" height="15" fill="rgb(226,3,54)" fg:x="7471" fg:w="1703"/><text x="25.3121%" y="239.50">fast_fl..</text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (201 samples, 0.67%)</title><rect x="30.1006%" y="213" width="0.6743%" height="15" fill="rgb(245,192,40)" fg:x="8973" fg:w="201"/><text x="30.3506%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (127 samples, 0.43%)</title><rect x="30.3489%" y="197" width="0.4260%" height="15" fill="rgb(238,167,29)" fg:x="9047" fg:w="127"/><text x="30.5989%" y="207.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (218 samples, 0.73%)</title><rect x="31.4089%" y="293" width="0.7313%" height="15" fill="rgb(232,182,51)" fg:x="9363" fg:w="218"/><text x="31.6589%" y="303.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (7 samples, 0.02%)</title><rect x="35.9611%" y="213" width="0.0235%" height="15" fill="rgb(231,60,39)" fg:x="10720" fg:w="7"/><text x="36.2111%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (7 samples, 0.02%)</title><rect x="35.9611%" y="197" width="0.0235%" height="15" fill="rgb(208,69,12)" fg:x="10720" fg:w="7"/><text x="36.2111%" y="207.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (10 samples, 0.03%)</title><rect x="36.1154%" y="181" width="0.0335%" height="15" fill="rgb(235,93,37)" fg:x="10766" fg:w="10"/><text x="36.3654%" y="191.50"></text></g><g><title>[unknown] (85 samples, 0.29%)</title><rect x="38.6749%" y="165" width="0.2851%" height="15" fill="rgb(213,116,39)" fg:x="11529" fg:w="85"/><text x="38.9249%" y="175.50"></text></g><g><title>[unknown] (53 samples, 0.18%)</title><rect x="38.7823%" y="149" width="0.1778%" height="15" fill="rgb(222,207,29)" fg:x="11561" fg:w="53"/><text x="39.0323%" y="159.50"></text></g><g><title>[unknown] (49 samples, 0.16%)</title><rect x="38.7957%" y="133" width="0.1644%" height="15" fill="rgb(206,96,30)" fg:x="11565" fg:w="49"/><text x="39.0457%" y="143.50"></text></g><g><title>[unknown] (41 samples, 0.14%)</title><rect x="38.8225%" y="117" width="0.1375%" height="15" fill="rgb(218,138,4)" fg:x="11573" fg:w="41"/><text x="39.0725%" y="127.50"></text></g><g><title>[unknown] (24 samples, 0.08%)</title><rect x="38.8796%" y="101" width="0.0805%" height="15" fill="rgb(250,191,14)" fg:x="11590" fg:w="24"/><text x="39.1296%" y="111.50"></text></g><g><title>[unknown] (12 samples, 0.04%)</title><rect x="38.9198%" y="85" width="0.0403%" height="15" fill="rgb(239,60,40)" fg:x="11602" fg:w="12"/><text x="39.1698%" y="95.50"></text></g><g><title>[unknown] (10 samples, 0.03%)</title><rect x="38.9265%" y="69" width="0.0335%" height="15" fill="rgb(206,27,48)" fg:x="11604" fg:w="10"/><text x="39.1765%" y="79.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="38.9366%" y="53" width="0.0235%" height="15" fill="rgb(225,35,8)" fg:x="11607" fg:w="7"/><text x="39.1866%" y="63.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="38.9500%" y="37" width="0.0101%" height="15" fill="rgb(250,213,24)" fg:x="11611" fg:w="3"/><text x="39.2000%" y="47.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (72 samples, 0.24%)</title><rect x="38.9601%" y="165" width="0.2415%" height="15" fill="rgb(247,123,22)" fg:x="11614" fg:w="72"/><text x="39.2101%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (72 samples, 0.24%)</title><rect x="38.9601%" y="149" width="0.2415%" height="15" fill="rgb(231,138,38)" fg:x="11614" fg:w="72"/><text x="39.2101%" y="159.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (1,151 samples, 3.86%)</title><rect x="36.1489%" y="181" width="3.8611%" height="15" fill="rgb(231,145,46)" fg:x="10776" fg:w="1151"/><text x="36.3989%" y="191.50">memc..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (241 samples, 0.81%)</title><rect x="39.2016%" y="165" width="0.8085%" height="15" fill="rgb(251,118,11)" fg:x="11686" fg:w="241"/><text x="39.4516%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (241 samples, 0.81%)</title><rect x="39.2016%" y="149" width="0.8085%" height="15" fill="rgb(217,147,25)" fg:x="11686" fg:w="241"/><text x="39.4516%" y="159.50"></text></g><g><title>memchr::vector::Vector::movemask_will_have_non_zero (7 samples, 0.02%)</title><rect x="40.0101%" y="181" width="0.0235%" height="15" fill="rgb(247,81,37)" fg:x="11927" fg:w="7"/><text x="40.2601%" y="191.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (7 samples, 0.02%)</title><rect x="40.0101%" y="165" width="0.0235%" height="15" fill="rgb(209,12,38)" fg:x="11927" fg:w="7"/><text x="40.2601%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.02%)</title><rect x="40.0101%" y="149" width="0.0235%" height="15" fill="rgb(227,1,9)" fg:x="11927" fg:w="7"/><text x="40.2601%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (21 samples, 0.07%)</title><rect x="40.0335%" y="165" width="0.0704%" height="15" fill="rgb(248,47,43)" fg:x="11934" fg:w="21"/><text x="40.2835%" y="175.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (46 samples, 0.15%)</title><rect x="40.0335%" y="181" width="0.1543%" height="15" fill="rgb(221,10,30)" fg:x="11934" fg:w="46"/><text x="40.2835%" y="191.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (25 samples, 0.08%)</title><rect x="40.1040%" y="165" width="0.0839%" height="15" fill="rgb(210,229,1)" fg:x="11955" fg:w="25"/><text x="40.3540%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="40.1677%" y="149" width="0.0201%" height="15" fill="rgb(222,148,37)" fg:x="11974" fg:w="6"/><text x="40.4177%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="40.1778%" y="133" width="0.0101%" height="15" fill="rgb(234,67,33)" fg:x="11977" fg:w="3"/><text x="40.4278%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="40.1778%" y="117" width="0.0101%" height="15" fill="rgb(247,98,35)" fg:x="11977" fg:w="3"/><text x="40.4278%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="40.1778%" y="101" width="0.0101%" height="15" fill="rgb(247,138,52)" fg:x="11977" fg:w="3"/><text x="40.4278%" y="111.50"></text></g><g><title>memchr::memchr::memchr (2,815 samples, 9.44%)</title><rect x="30.7749%" y="325" width="9.4431%" height="15" fill="rgb(213,79,30)" fg:x="9174" fg:w="2815"/><text x="31.0249%" y="335.50">memchr::memchr..</text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (2,815 samples, 9.44%)</title><rect x="30.7749%" y="309" width="9.4431%" height="15" fill="rgb(246,177,23)" fg:x="9174" fg:w="2815"/><text x="31.0249%" y="319.50">memchr::arch::..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (2,408 samples, 8.08%)</title><rect x="32.1402%" y="293" width="8.0778%" height="15" fill="rgb(230,62,27)" fg:x="9581" fg:w="2408"/><text x="32.3902%" y="303.50">memchr::mem..</text></g><g><title>memchr::memchr::memchr_raw (2,408 samples, 8.08%)</title><rect x="32.1402%" y="277" width="8.0778%" height="15" fill="rgb(216,154,8)" fg:x="9581" fg:w="2408"/><text x="32.3902%" y="287.50">memchr::mem..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (2,408 samples, 8.08%)</title><rect x="32.1402%" y="261" width="8.0778%" height="15" fill="rgb(244,35,45)" fg:x="9581" fg:w="2408"/><text x="32.3902%" y="271.50">memchr::arc..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (1,961 samples, 6.58%)</title><rect x="33.6397%" y="245" width="6.5783%" height="15" fill="rgb(251,115,12)" fg:x="10028" fg:w="1961"/><text x="33.8897%" y="255.50">memchr::a..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (1,767 samples, 5.93%)</title><rect x="34.2905%" y="229" width="5.9275%" height="15" fill="rgb(240,54,50)" fg:x="10222" fg:w="1767"/><text x="34.5405%" y="239.50">memchr::..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (1,262 samples, 4.23%)</title><rect x="35.9846%" y="213" width="4.2335%" height="15" fill="rgb(233,84,52)" fg:x="10727" fg:w="1262"/><text x="36.2346%" y="223.50">memch..</text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (1,262 samples, 4.23%)</title><rect x="35.9846%" y="197" width="4.2335%" height="15" fill="rgb(207,117,47)" fg:x="10727" fg:w="1262"/><text x="36.2346%" y="207.50">memch..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::or (9 samples, 0.03%)</title><rect x="40.1879%" y="181" width="0.0302%" height="15" fill="rgb(249,43,39)" fg:x="11980" fg:w="9"/><text x="40.4379%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_or_si128 (9 samples, 0.03%)</title><rect x="40.1879%" y="165" width="0.0302%" height="15" fill="rgb(209,38,44)" fg:x="11980" fg:w="9"/><text x="40.4379%" y="175.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (559 samples, 1.88%)</title><rect x="40.2180%" y="325" width="1.8752%" height="15" fill="rgb(236,212,23)" fg:x="11989" fg:w="559"/><text x="40.4680%" y="335.50">s..</text></g><g><title>rust_1brc::calculate_station_values::_{{closure}} (559 samples, 1.88%)</title><rect x="40.2180%" y="309" width="1.8752%" height="15" fill="rgb(242,79,21)" fg:x="11989" fg:w="559"/><text x="40.4680%" y="319.50">r..</text></g><g><title>core::hash::Hasher::write_length_prefix (11 samples, 0.04%)</title><rect x="45.5652%" y="213" width="0.0369%" height="15" fill="rgb(211,96,35)" fg:x="13583" fg:w="11"/><text x="45.8152%" y="223.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (11 samples, 0.04%)</title><rect x="45.5652%" y="197" width="0.0369%" height="15" fill="rgb(253,215,40)" fg:x="13583" fg:w="11"/><text x="45.8152%" y="207.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (11 samples, 0.04%)</title><rect x="45.5652%" y="181" width="0.0369%" height="15" fill="rgb(211,81,21)" fg:x="13583" fg:w="11"/><text x="45.8152%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (11 samples, 0.04%)</title><rect x="45.5652%" y="165" width="0.0369%" height="15" fill="rgb(208,190,38)" fg:x="13583" fg:w="11"/><text x="45.8152%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (275 samples, 0.92%)</title><rect x="48.1919%" y="181" width="0.9225%" height="15" fill="rgb(235,213,38)" fg:x="14366" fg:w="275"/><text x="48.4419%" y="191.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (275 samples, 0.92%)</title><rect x="48.1919%" y="165" width="0.9225%" height="15" fill="rgb(237,122,38)" fg:x="14366" fg:w="275"/><text x="48.4419%" y="175.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (275 samples, 0.92%)</title><rect x="48.1919%" y="149" width="0.9225%" height="15" fill="rgb(244,218,35)" fg:x="14366" fg:w="275"/><text x="48.4419%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (275 samples, 0.92%)</title><rect x="48.1919%" y="133" width="0.9225%" height="15" fill="rgb(240,68,47)" fg:x="14366" fg:w="275"/><text x="48.4419%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (63 samples, 0.21%)</title><rect x="48.9031%" y="117" width="0.2113%" height="15" fill="rgb(210,16,53)" fg:x="14578" fg:w="63"/><text x="49.1531%" y="127.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (55 samples, 0.18%)</title><rect x="49.1144%" y="165" width="0.1845%" height="15" fill="rgb(235,124,12)" fg:x="14641" fg:w="55"/><text x="49.3644%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (1,220 samples, 4.09%)</title><rect x="49.2989%" y="165" width="4.0926%" height="15" fill="rgb(224,169,11)" fg:x="14696" fg:w="1220"/><text x="49.5489%" y="175.50">core..</text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (2,458 samples, 8.25%)</title><rect x="45.6021%" y="197" width="8.2456%" height="15" fill="rgb(250,166,2)" fg:x="13594" fg:w="2458"/><text x="45.8521%" y="207.50">&lt;rustc_hash..</text></g><g><title>rustc_hash::FxHasher::add_to_hash (1,411 samples, 4.73%)</title><rect x="49.1144%" y="181" width="4.7333%" height="15" fill="rgb(242,216,29)" fg:x="14641" fg:w="1411"/><text x="49.3644%" y="191.50">rustc_..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (136 samples, 0.46%)</title><rect x="53.3915%" y="165" width="0.4562%" height="15" fill="rgb(230,116,27)" fg:x="15916" fg:w="136"/><text x="53.6415%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (2,527 samples, 8.48%)</title><rect x="45.5652%" y="293" width="8.4770%" height="15" fill="rgb(228,99,48)" fg:x="13583" fg:w="2527"/><text x="45.8152%" y="303.50">hashbrown::m..</text></g><g><title>core::hash::BuildHasher::hash_one (2,527 samples, 8.48%)</title><rect x="45.5652%" y="277" width="8.4770%" height="15" fill="rgb(253,11,6)" fg:x="13583" fg:w="2527"/><text x="45.8152%" y="287.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,527 samples, 8.48%)</title><rect x="45.5652%" y="261" width="8.4770%" height="15" fill="rgb(247,143,39)" fg:x="13583" fg:w="2527"/><text x="45.8152%" y="271.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,527 samples, 8.48%)</title><rect x="45.5652%" y="245" width="8.4770%" height="15" fill="rgb(236,97,10)" fg:x="13583" fg:w="2527"/><text x="45.8152%" y="255.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2,527 samples, 8.48%)</title><rect x="45.5652%" y="229" width="8.4770%" height="15" fill="rgb(233,208,19)" fg:x="13583" fg:w="2527"/><text x="45.8152%" y="239.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2,516 samples, 8.44%)</title><rect x="45.6021%" y="213" width="8.4401%" height="15" fill="rgb(216,164,2)" fg:x="13594" fg:w="2516"/><text x="45.8521%" y="223.50">core::hash::..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (58 samples, 0.19%)</title><rect x="53.8477%" y="197" width="0.1946%" height="15" fill="rgb(220,129,5)" fg:x="16052" fg:w="58"/><text x="54.0977%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,185 samples, 3.98%)</title><rect x="57.7960%" y="261" width="3.9752%" height="15" fill="rgb(242,17,10)" fg:x="17229" fg:w="1185"/><text x="58.0460%" y="271.50">&lt;has..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,185 samples, 3.98%)</title><rect x="57.7960%" y="245" width="3.9752%" height="15" fill="rgb(242,107,0)" fg:x="17229" fg:w="1185"/><text x="58.0460%" y="255.50">hash..</text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (978 samples, 3.28%)</title><rect x="58.4904%" y="229" width="3.2808%" height="15" fill="rgb(251,28,31)" fg:x="17436" fg:w="978"/><text x="58.7404%" y="239.50">cor..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (474 samples, 1.59%)</title><rect x="61.7712%" y="245" width="1.5901%" height="15" fill="rgb(233,223,10)" fg:x="18414" fg:w="474"/><text x="62.0212%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (474 samples, 1.59%)</title><rect x="61.7712%" y="229" width="1.5901%" height="15" fill="rgb(215,21,27)" fg:x="18414" fg:w="474"/><text x="62.0212%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (474 samples, 1.59%)</title><rect x="61.7712%" y="213" width="1.5901%" height="15" fill="rgb(232,23,21)" fg:x="18414" fg:w="474"/><text x="62.0212%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (474 samples, 1.59%)</title><rect x="61.7712%" y="197" width="1.5901%" height="15" fill="rgb(244,5,23)" fg:x="18414" fg:w="474"/><text x="62.0212%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,994 samples, 23.46%)</title><rect x="63.3613%" y="197" width="23.4619%" height="15" fill="rgb(226,81,46)" fg:x="18888" fg:w="6994"/><text x="63.6113%" y="207.50">&lt;[A] as core::slice::cmp::SlicePartia..</text></g><g><title>[libc.so.6] (4,850 samples, 16.27%)</title><rect x="70.5535%" y="181" width="16.2697%" height="15" fill="rgb(247,70,30)" fg:x="21032" fg:w="4850"/><text x="70.8035%" y="191.50">[libc.so.6]</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (7,492 samples, 25.13%)</title><rect x="61.7712%" y="261" width="25.1325%" height="15" fill="rgb(212,68,19)" fg:x="18414" fg:w="7492"/><text x="62.0212%" y="271.50">hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (7,018 samples, 23.54%)</title><rect x="63.3613%" y="245" width="23.5424%" height="15" fill="rgb(240,187,13)" fg:x="18888" fg:w="7018"/><text x="63.6113%" y="255.50">hashbrown::rustc_entry::_&lt;impl hashbr..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7,018 samples, 23.54%)</title><rect x="63.3613%" y="229" width="23.5424%" height="15" fill="rgb(223,113,26)" fg:x="18888" fg:w="7018"/><text x="63.6113%" y="239.50">core::cmp::impls::&lt;impl core::cmp::Pa..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (7,018 samples, 23.54%)</title><rect x="63.3613%" y="213" width="23.5424%" height="15" fill="rgb(206,192,2)" fg:x="18888" fg:w="7018"/><text x="63.6113%" y="223.50">core::slice::cmp::&lt;impl core::cmp::Pa..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (24 samples, 0.08%)</title><rect x="86.8232%" y="197" width="0.0805%" height="15" fill="rgb(241,108,4)" fg:x="25882" fg:w="24"/><text x="87.0732%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (1,217 samples, 4.08%)</title><rect x="86.9071%" y="261" width="4.0825%" height="15" fill="rgb(247,173,49)" fg:x="25907" fg:w="1217"/><text x="87.1571%" y="271.50">hash..</text></g><g><title>hashbrown::raw::sse2::Group::load (331 samples, 1.11%)</title><rect x="90.9896%" y="261" width="1.1104%" height="15" fill="rgb(224,114,35)" fg:x="27124" fg:w="331"/><text x="91.2396%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (331 samples, 1.11%)</title><rect x="90.9896%" y="245" width="1.1104%" height="15" fill="rgb(245,159,27)" fg:x="27124" fg:w="331"/><text x="91.2396%" y="255.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (329 samples, 1.10%)</title><rect x="90.9963%" y="229" width="1.1037%" height="15" fill="rgb(245,172,44)" fg:x="27126" fg:w="329"/><text x="91.2463%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,938 samples, 6.50%)</title><rect x="92.1000%" y="261" width="6.5012%" height="15" fill="rgb(236,23,11)" fg:x="27455" fg:w="1938"/><text x="92.3500%" y="271.50">hashbrown..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,938 samples, 6.50%)</title><rect x="92.1000%" y="245" width="6.5012%" height="15" fill="rgb(205,117,38)" fg:x="27455" fg:w="1938"/><text x="92.3500%" y="255.50">core::cor..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (283 samples, 0.95%)</title><rect x="98.6011%" y="261" width="0.9493%" height="15" fill="rgb(237,72,25)" fg:x="29393" fg:w="283"/><text x="98.8511%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (283 samples, 0.95%)</title><rect x="98.6011%" y="245" width="0.9493%" height="15" fill="rgb(244,70,9)" fg:x="29393" fg:w="283"/><text x="98.8511%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (283 samples, 0.95%)</title><rect x="98.6011%" y="229" width="0.9493%" height="15" fill="rgb(217,125,39)" fg:x="29393" fg:w="283"/><text x="98.8511%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (12,826 samples, 43.03%)</title><rect x="56.6320%" y="277" width="43.0258%" height="15" fill="rgb(235,36,10)" fg:x="16882" fg:w="12826"/><text x="56.8820%" y="287.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (32 samples, 0.11%)</title><rect x="99.5505%" y="261" width="0.1073%" height="15" fill="rgb(251,123,47)" fg:x="29676" fg:w="32"/><text x="99.8005%" y="271.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (16,926 samples, 56.78%)</title><rect x="42.8950%" y="309" width="56.7796%" height="15" fill="rgb(221,13,13)" fg:x="12787" fg:w="16926"/><text x="43.1450%" y="319.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13,603 samples, 45.63%)</title><rect x="54.0423%" y="293" width="45.6323%" height="15" fill="rgb(238,131,9)" fg:x="16110" fg:w="13603"/><text x="54.2923%" y="303.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.02%)</title><rect x="99.6578%" y="277" width="0.0168%" height="15" fill="rgb(211,50,8)" fg:x="29708" fg:w="5"/><text x="99.9078%" y="287.50"></text></g><g><title>all (29,810 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="29810"/><text x="0.2500%" y="527.50"></text></g><g><title>rust-1brc (29,810 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="29810"/><text x="0.2500%" y="511.50">rust-1brc</text></g><g><title>_start (29,802 samples, 99.97%)</title><rect x="0.0268%" y="485" width="99.9732%" height="15" fill="rgb(246,228,12)" fg:x="8" fg:w="29802"/><text x="0.2768%" y="495.50">_start</text></g><g><title>__libc_start_main (29,802 samples, 99.97%)</title><rect x="0.0268%" y="469" width="99.9732%" height="15" fill="rgb(213,55,15)" fg:x="8" fg:w="29802"/><text x="0.2768%" y="479.50">__libc_start_main</text></g><g><title>[libc.so.6] (29,802 samples, 99.97%)</title><rect x="0.0268%" y="453" width="99.9732%" height="15" fill="rgb(209,9,3)" fg:x="8" fg:w="29802"/><text x="0.2768%" y="463.50">[libc.so.6]</text></g><g><title>main (29,802 samples, 99.97%)</title><rect x="0.0268%" y="437" width="99.9732%" height="15" fill="rgb(230,59,30)" fg:x="8" fg:w="29802"/><text x="0.2768%" y="447.50">main</text></g><g><title>std::rt::lang_start_internal (29,802 samples, 99.97%)</title><rect x="0.0268%" y="421" width="99.9732%" height="15" fill="rgb(209,121,21)" fg:x="8" fg:w="29802"/><text x="0.2768%" y="431.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (29,802 samples, 99.97%)</title><rect x="0.0268%" y="405" width="99.9732%" height="15" fill="rgb(220,109,13)" fg:x="8" fg:w="29802"/><text x="0.2768%" y="415.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (29,802 samples, 99.97%)</title><rect x="0.0268%" y="389" width="99.9732%" height="15" fill="rgb(232,18,1)" fg:x="8" fg:w="29802"/><text x="0.2768%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (29,802 samples, 99.97%)</title><rect x="0.0268%" y="373" width="99.9732%" height="15" fill="rgb(215,41,42)" fg:x="8" fg:w="29802"/><text x="0.2768%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>rust_1brc::main (29,802 samples, 99.97%)</title><rect x="0.0268%" y="357" width="99.9732%" height="15" fill="rgb(224,123,36)" fg:x="8" fg:w="29802"/><text x="0.2768%" y="367.50">rust_1brc::main</text></g><g><title>rust_1brc::calculate_station_values (29,802 samples, 99.97%)</title><rect x="0.0268%" y="341" width="99.9732%" height="15" fill="rgb(240,125,3)" fg:x="8" fg:w="29802"/><text x="0.2768%" y="351.50">rust_1brc::calculate_station_values</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (17,262 samples, 57.91%)</title><rect x="42.0933%" y="325" width="57.9067%" height="15" fill="rgb(205,98,50)" fg:x="12548" fg:w="17262"/><text x="42.3433%" y="335.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (97 samples, 0.33%)</title><rect x="99.6746%" y="309" width="0.3254%" height="15" fill="rgb(205,185,37)" fg:x="29713" fg:w="97"/><text x="99.9246%" y="319.50"></text></g></svg></svg>